
import Foundation
import SwiftData

final class {{entity}}PullService {
    private let modelContext: ModelContext
    private let user: User
    private let userId: UUID

    init(modelContext: ModelContext, user: User) {
        self.modelContext = modelContext
        self.user = user
        self.userId = user.id
    }
 {{#transactional}}
    @MainActor
    func pullAndMerge{{entity}}sByAccount(accountId: String) async throws {
        try await pull{{entity}}s(
            from: API{{entity}}.queryByAccount(accountId),
            extract: { try $0.decode([Remote{{entity}}].self, from: $1) }
        )
    }
 {{/transactional}}
    @MainActor
    func pullAndMerge{{entity}}s() async throws {
        try await pull{{entity}}s(
            from: API{{entity}}.queryEndpoint,
            extract: { try $0.decode({{entity}}PagedResponse.self, from: $1).content }
        )
    }

    private func pull{{entity}}s(
        from url: URL,
        extract: (JSONDecoder, Data) throws -> [Remote{{entity}}]
    ) async throws {
        print("[{{entity}}PullService] üåç Fetching from \(url)")

        guard let token = TokenProvider.shared.getToken() else {
            print("[{{entity}}PullService] ‚ùå Missing token")
            throw AppError.missingToken
        }

        var request = URLRequest(url: url)
        request.setValue("application/json", forHTTPHeaderField: "Accept")
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")

        let (data, response) = try await URLSession.shared.data(for: request)

        guard let httpResponse = response as? HTTPURLResponse,
              (200..<300).contains(httpResponse.statusCode) else {
            let body = String(data: data, encoding: .utf8) ?? "<no body>"
            print("[{{entity}}PullService] ‚ùå Server error: \(body)")
            throw AppError.server(body)
        }

        let decoder = makeDecoder()
        let remoteItems = try extract(decoder, data)
        print("[{{entity}}PullService] ‚úÖ Decoded \(remoteItems.count) transactions")

        let local{{entity}}s = try modelContext.fetch(
            FetchDescriptor<{{entity}}>(predicate: #Predicate { $0.user?.id == userId })
        )

        print("[{{entity}}PullService] üóÇ Found \(local{{entity}}s.count) local transactions")

        for remoteItem in remoteItems {
            if let index = local{{entity}}s.firstIndex(where: { $0.reference == remoteItem.reference }) {
                let local = local{{entity}}s[index]
                guard remoteItem.updatedAt ?? .distantPast > (local.updatedAt ?? .distantPast) ||
                      local.statusRaw == {{entity}}Status.syncing.rawValue else {
                    local.remoteId = remoteItem.id
                    print("[{{entity}}PullService] ‚è© Skipped: \(local.name)")
                    continue
                }
                print("[{{entity}}PullService] üîÑ Updating: \(local.name)")
                update(local: local, with: remoteItem)
            } else {
                print("[{{entity}}PullService] ‚ûï Creating: \(remoteItem.name)")
                let new = make{{entity}}(from: remoteItem)
                new.user = user
                modelContext.insert(new)
            }
        }

        try modelContext.save()
        print("[{{entity}}PullService] üíæ Saved changes")
    }

    private func update(local: {{entity}}, with remote: Remote{{entity}}) {
        {{#fields}}
            {{^isId}}
            {{^isParentRelation}}
              local.{{name}} = remote.{{name}}
            {{/isParentRelation}}
           {{/isId}}
        {{/fields}}

        local.remoteId = remote.id
        local.syncAt = Date()
        local.status = .sync
        local.statusRaw = TransactionStatus.sync.rawValue
    }

    private func make{{entity}}(from remote: Remote{{entity}}) -> {{entity}} {
        let entity = {{entity}}(
             {{#fields}}
                {{^isId}}
                {{name}}: remote.{{name}},
                {{/isId}}
            {{/fields}}
        )
        entity.remoteId = remote.id
        entity.syncAt = Date()
        entity.status = .sync
        entity.statusRaw = {{entity}}Status.sync.rawValue
        return entity
    }

    private func makeDecoder() -> JSONDecoder {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .custom { decoder in
            let container = try decoder.singleValueContainer()
            let dateString = try container.decode(String.self)
            let formats = [
                "yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
                "yyyy-MM-dd'T'HH:mm:ssZ"
            ]
            for format in formats {
                let formatter = DateFormatter()
                formatter.dateFormat = format
                formatter.locale = Locale(identifier: "en_US_POSIX")
                formatter.timeZone = TimeZone(secondsFromGMT: 0)
                if let date = formatter.date(from: dateString) {
                    return date
                }
            }
            throw DecodingError.dataCorruptedError(
                in: container,
                debugDescription: "Unrecognized date format: \(dateString)"
            )
        }
        return decoder
    }
}
