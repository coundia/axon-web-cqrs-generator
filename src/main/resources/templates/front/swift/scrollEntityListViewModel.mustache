import Foundation
import SwiftData

extension {{entity}}ListViewModel {

    func loadMore{{entity}}sIfNeeded(current item: {{entity}}) {

        print("[loadMore{{entity}}sIfNeeded]")
        guard let last = entities.last, last.id == item.id else { return }
        loadMore{{entity}}s()
    }
    private func loadMore{{entity}}s() {
        guard !isLoading else { return }
        isLoading = true
        defer { isLoading = false }

        let cond = "{{entity}}Status.delete".uppercased()
        let predicate: Predicate<{{entity}}> = #Predicate { item in
            item.user?.username == username && item.statusRaw != cond
           {{#header}} && (current{{headerUpperCase}}Id == nil || item.{{headerLowerCase}} == current{{headerUpperCase}}Id) {{/header}}
        }
        var descriptor = FetchDescriptor<{{entity}}>(
            predicate: predicate,
            sortBy: [SortDescriptor(\.updatedAt, order: .reverse)]
        )
        descriptor.fetchOffset = entities.count
        descriptor.fetchLimit = 5

        do {
            let newItems = try modelContext.fetch(descriptor).filter { new in
                !entities.contains { $0.id == new.id }
            }
            entities.append(contentsOf: newItems)
        } catch {
            errorMessage = mapError(error)
        }
    }
}
