{{#isText}}
    {{#nullable}}
textField("{{displayName}}", text: Binding(get: { {{name}} ?? "" }, set: { {{name}} = $0 }))
    {{/nullable}}
    {{^nullable}}
textField("{{displayName}}", text: ${{name}})
    {{/nullable}}
{{/isText}}

{{#isDouble}}
    TextField("{{displayName}}", text: ${{name}}String)
    .keyboardType(.decimalPad)
    .focused($is{{nameCapitalized}}Focused)
{{/isDouble}}

{{#isInt}}
    {{#nullable}}
intField("{{displayName}}", value: Binding(get: { {{name}} ?? 0 }, set: { {{name}} = $0 }))
    {{/nullable}}
    {{^nullable}}
intField("{{displayName}}", value: ${{name}})
    {{/nullable}}
{{/isInt}}

{{#isBool}}
    {{#nullable}}
Toggle("{{displayName}}", isOn: Binding(get: { {{name}} ?? false }, set: { {{name}} = $0 }))
    {{/nullable}}
    {{^nullable}}
Toggle("{{displayName}}", isOn: ${{name}})
    {{/nullable}}
{{/isBool}}

{{#isDate}}
    {{#nullable}}
dateField("{{displayName}}", date: Binding(get: { {{name}} ?? Date() }, set: { {{name}} = $0 }))
    {{/nullable}}
    {{^nullable}}
dateField("{{displayName}}", date: ${{name}})
    {{/nullable}}
{{/isDate}}

{{#isManyToOne}}

HStack {
    Text("{{entityType}}")
    Spacer()
    if let item = selected{{entityType}} {
        Text(item.name).foregroundColor(.secondary)
    } else {
        Text("None").foregroundColor(.gray)
    }
}
.onTapGesture {
    show{{entityType}}Picker = true
}
.sheet(isPresented: $show{{entityType}}Picker, onDismiss: {
     {{name}} = selected{{entityType}}?.remoteId
     {{name}}LocalId = selected{{entityType}}?.id

        {{#hasCategory}}
        type{{entity}}Raw = selectedCategory?.typeCategoryRaw ?? ""
       lastUsedCategoryId = selectedCategory?.remoteId
       {{/hasCategory}}

}) {
    {{entityType}}PickerView(
        selected{{entityType}}: $selected{{entityType}},
        viewModel: {{entityType}}ListViewModel(modelContext: modelContext, user: viewModel.user)
    )
}
{{/isManyToOne}}
