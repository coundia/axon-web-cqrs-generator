

import Foundation

struct API{{entity}} {

    static var syncEndpoint: URL {
        return APIConfiguration.baseURL.appendingPathComponent("/v1/commands/{{entityLowerCase}}/sync")
    }

    static var queryEndpoint: URL {
        var components = URLComponents()
        components.scheme = APIConfiguration.baseURL.scheme
        components.host = APIConfiguration.baseURL.host
        components.port = APIConfiguration.baseURL.port
        {{^isPublic}}
     components.path = APIConfiguration.baseURL.appendingPathComponent("v1/queries/{{entityLowerCase}}s").path
        {{/isPublic}}
{{#isPublic}}
     components.path = APIConfiguration.baseURL.appendingPathComponent("public/queries/{{entityLowerCase}}s").path
        {{/isPublic}}
        components.queryItems = [
            URLQueryItem(name: "page", value: "0"),
            URLQueryItem(name: "limit", value: "10000")
        ]
        return components.url!
    }

    {{#transactional}}
     static func queryByAccount(_ account: String) -> URL {
        var components = URLComponents()
        components.scheme = APIConfiguration.baseURL.scheme
        components.host = APIConfiguration.baseURL.host
        components.port = APIConfiguration.baseURL.port
        components.path = APIConfiguration.baseURL.appendingPathComponent("v1/queries/{{entityLowerCase}}/account").path
        components.queryItems = [
            URLQueryItem(name: "account", value: account)
        ]
        return components.url!
    }
    {{/transactional}}
}
