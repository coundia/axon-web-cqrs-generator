{{^isChat}}
import SwiftUI
import SwiftData

struct {{entity}}PickerView: View {
    @Binding var selected{{entity}}: {{entity}}?
    @ObservedObject var viewModel: {{entity}}ListViewModel
    @Environment(\.dismiss) var dismiss
    @State private var selectedFilter: {{entity}}Type = .type1
    @State private var showForm: Bool = false

    private var filteredEntities: [{{entity}}] {
        viewModel.entities.filter {
          {{#hasType}}
          $0.type{{entity}}Raw == selectedFilter.rawValue &&
          {{/hasType}}
          $0.deletedAt == nil
          && $0.remoteId != nil
         }
    }

    var body: some View {
        NavigationView {
            VStack(spacing: 0) {
                Text("Seuls les éléments synchronisés sont listés ici.")
                    .font(.footnote)
                    .foregroundColor(.secondary)
                    .padding(.top, 8)
              {{#hasType}}
                Picker("Type", selection: $selectedFilter) {
                    ForEach({{entity}}Type.allCases, id: \.self) { type in
                        Text(t(type.rawValue.capitalized)).tag(type)
                    }
                }
                .pickerStyle(SegmentedPickerStyle())
                .padding()
              {{/hasType}}

                List {
                    Section {
                        ForEach(filteredEntities, id: \.id) { item in
                            Button {
                                selected{{entity}} = item
                                dismiss()
                            } label: {
                                HStack {
                                    Text(t(item.name))
                                    Spacer()
                                    if let createdBy = item.createdBy {
                                        Text(t(createdBy))
                                            .font(.caption)
                                            .foregroundColor(.secondary)
                                    }
                                }
                            }
                        }
                    }

                    Section {
                        Button(t("Rafraîchir")) {
                            Task{ await viewModel.pull()}
                        }
                        Button(t("Ajouter {{entity}}")) {
                            showForm = true
                        }
                    }
                }
            }
            .navigationTitle(t("Sélectionner {{entity}}"))
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("Cancel") {
                        dismiss()
                    }
                }
            }
            .sheet(isPresented: $showForm, onDismiss: {
                viewModel.fetchEntities()
            }) {
                {{entity}}FormView(
                    isPresented: $showForm,
                    entity: .constant(nil),
                    {{#header}}
                    current{{headerUpperCase}}: .constant(nil),
                    {{/header}}
                    viewModel: viewModel
                )
            }
            .onAppear {
                viewModel.fetchEntities()
                {{#hasType}}
                viewModel.fixType{{entity}}RawIfMissing()
                {{/hasType}}
            }
        }
    }
}
{{/isChat}}
