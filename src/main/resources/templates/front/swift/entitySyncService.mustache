import Foundation
final class {{entity}}SyncService {
    func sync(request: Sync{{entity}}Request) async throws {
        print("[{{entity}}SyncService.sync]")

        guard let token = TokenProvider.shared.getToken() else {
            print("[{{entity}}SyncService] ‚ùå No token found")
            throw AppError.missingToken
        }

        let url = API{{entity}}.syncEndpoint

        print("[{{entity}}SyncService] üåç Sync URL: \(url.absoluteString)")
       

        var requestData = URLRequest(url: url)
        requestData.httpMethod = "POST"
        requestData.setValue("application/json", forHTTPHeaderField: "Content-Type")
        requestData.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")

        let encoder = JSONEncoder()
        encoder.outputFormatting = .prettyPrinted
        encoder.dateEncodingStrategy = .iso8601
        let payloadData = try encoder.encode(request)
        requestData.httpBody = payloadData

        let (data, response) = try await URLSession.shared.data(for: requestData)

        guard let httpResponse = response as? HTTPURLResponse else {
            throw URLError(.badServerResponse)
        }

        print("[{{entity}}SyncService] üì° HTTP Status: \(httpResponse.statusCode)")

        if !(200..<300).contains(httpResponse.statusCode) {
            let serverMessage = try? JSONDecoder().decode(ApiResponse.self, from: data)
            let message = serverMessage?.message ?? "Unknown server error"
            print("[{{entity}}SyncService] ‚ùå Server Error: \(message)")
            throw AppError.server(message)
        }

        print("[{{entity}}SyncService] ‚úÖ Sync successful")
    }
}
