import SwiftUI
import SwiftData

struct {{entity}}FormView: View {

 @Environment(\.modelContext) private var modelContext
    @Binding var isPresented: Bool
    @Binding var entity: {{entity}}?
    var viewModel: {{entity}}ListViewModel
    {{#fields}}
        @State private var {{name}}: {{realType}}{{#nullable}}? = nil{{/nullable}}{{^nullable}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{/nullable}}
        {{#isManyToOne}}
         @State private var show{{entityType}}Picker = false
         @State private var selected{{entityType}}: {{entityType}}? = nil
         @State private var  {{name}}LocalId: String? = nil
        {{/isManyToOne}}
    {{/fields}}
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("{{entity}} Information")) {
                    {{#fields}}
                        {{^readOnly}}
                        {{> SwiftFieldInput }}
                        {{/readOnly}}
                    {{/fields}}
                }
                Section {
                    Button("Save", action: handleSave)
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(8)
                }
            }
            .navigationTitle(entity == nil ? "New {{entity}}" : "Edit {{entity}}")
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("Cancel") { withAnimation { isPresented = false } }
                }
            }
            .onAppear(perform: populateForm)
            .onChange(of: entity) { _ in populateForm() }
        }
    }

    private func handleSave() {
        if let e = entity {
            viewModel.updateEntity(e,
                {{#fields}}
    {{name}}: {{#nullable}}{{name}} ?? {{#isText}}""{{/isText}}{{#isInt}}0{{/isInt}}{{#isDouble}}0.0{{/isDouble}}{{#isBool}}false{{/isBool}}{{#isDate}}Date(){{/isDate}}{{/nullable}}{{^nullable}}{{name}}{{/nullable}},
               {{#isManyToOne}}
        {{name}}LocalId: {{name}}LocalId,
               {{/isManyToOne}}
                {{/fields}}
            )
        } else {
            viewModel.createEntity(
                {{#fields}}
    {{^isId}}
    {{name}}: {{#nullable}}{{name}} ?? {{#isText}}""{{/isText}}{{#isInt}}0{{/isInt}}{{#isDouble}}0.0{{/isDouble}}{{#isBool}}false{{/isBool}}{{#isDate}}Date(){{/isDate}}{{/nullable}}{{^nullable}}{{name}}{{/nullable}},
             {{/isId}}
            {{#isManyToOne}}
            {{name}}LocalId: {{name}}LocalId,
               {{/isManyToOne}}

{{/fields}}
            )
        }
        withAnimation { isPresented = false }
    }
    private func populateForm() {
        if let e = entity {
            {{#fields}}
    {{name}} = e.{{name}}
{{/fields}}
        } else {
            {{#fields}}
    {{name}} = {{#nullable}}nil{{/nullable}}{{^nullable}}{{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{/nullable}}
{{/fields}}
        }
    }


}