import SwiftUI
import SwiftData

struct {{entity}}FormView: View {

 @Environment(\.modelContext) private var modelContext
    @Binding var isPresented: Bool
    @Binding var entity: {{entity}}?
    {{#header}}
    @Binding  var current{{headerUpperCase}}: {{headerUpperCase}}?
    {{/header}}
    var viewModel: {{entity}}ListViewModel
    {{#fields}}
        {{^isEnum}}
            @State private var {{name}}: {{realType}}{{#nullable}}? = nil{{/nullable}}{{^nullable}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{/nullable}}
            {{#isManyToOne}}
             @State private var show{{entityType}}Picker = false
             @State private var selected{{entityType}}: {{entityType}}? = nil
             @State private var  {{name}}LocalId: String? = nil
            {{/isManyToOne}}
        {{/isEnum}}
    {{#isDouble}}
        @State private var {{name}}String: String = ""
        @FocusState private var is{{nameCapitalized}}Focused: Bool
    {{/isDouble}}
    {{/fields}}

@State private var type{{entity}}: {{entity}}Type = {{entity}}Type.allCases.first!
@State private var type{{entity}}Raw: String = t({{entity}}Type.allCases.first!.rawValue) ?? ""

{{#hasCategory}}
@AppStorage("lastUsedCategoryId") private var lastUsedCategoryId: String?
{{/hasCategory}}

@ObservedObject var network = NetworkMonitor.shared
@AppStorage("autoSave{{entity}}") private var autoSave: Bool = {{isAutoSave}}

    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("{{entity}} ")) {
                    {{#fields}}
                        {{^readOnly}}
                        {{^isEnum}}
                        {{> SwiftFieldInput }}
                        {{/isEnum}}
                        {{/readOnly}}
                    {{/fields}}

                    {{#hasType}}

                      Picker(
                        "Type",
                        selection: Binding(
                            get: {
                                {{entity}}Type(rawValue: type{{entity}}Raw)
                                    ?? {{entity}}Type.allCases.first!
                            },
                            set: {
                                type{{entity}}Raw = $0.rawValue
                            }
                        )
                    ) {
                        ForEach({{entity}}Type.allCases, id: \.self) { type in
                            Text(t(type.rawValue.capitalized)).tag(type)
                        }
                    }

                    {{/hasType}}
                }
                Section {
                    Button(t("Enregistrer"), action: handleSave)
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color("TenantColorPrimary"))
                        .foregroundColor(.white)
                        .cornerRadius(8)
                }
            }
            .navigationTitle(entity == nil ? "Cr√©ation {{entity}}" : "Modification {{entity}}")
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button(t("Retour")) { withAnimation { isPresented = false } }
                }
            }
            .onAppear(perform: populateForm)
            .onChange(of: entity) { _ in populateForm() }
        }
    }

    private func handleSave() {

    var entityToSync: {{entity}}?

        if let e = entity {
            viewModel.updateEntity(e,
                {{#fields}}
    {{#isDouble}}
        {{name}}: Double({{name}}String) ?? 0.0,
    {{/isDouble}}
    {{^isDouble}}
    {{name}}: {{#nullable}}{{name}} ?? {{#isText}}""{{/isText}}{{#isInt}}0{{/isInt}}{{#isDouble}}0.0{{/isDouble}}{{#isBool}}false{{/isBool}}{{#isDate}}Date(){{/isDate}}{{/nullable}}{{^nullable}}{{name}}{{/nullable}},
               {{#isManyToOne}}
        {{name}}LocalId: {{name}}LocalId,
               {{/isManyToOne}}
    {{/isDouble}}
                {{/fields}}
            )

            entityToSync = e

        } else {

           entityToSync = viewModel.createEntity(
                {{#fields}}
    {{#isDouble}}
        {{name}}: Double({{name}}String) ?? 0.0,
    {{/isDouble}}
    {{^isDouble}}
    {{^isId}}
    {{name}}: {{#nullable}}{{name}} ?? {{#isText}}""{{/isText}}{{#isInt}}0{{/isInt}}{{#isDouble}}0.0{{/isDouble}}{{#isBool}}false{{/isBool}}{{#isDate}}Date(){{/isDate}}{{/nullable}}{{^nullable}}{{name}}{{/nullable}},
             {{/isId}}
            {{#isManyToOne}}
            {{name}}LocalId: {{name}}LocalId,
               {{/isManyToOne}}
    {{/isDouble}}
{{/fields}}
            )
        }

      if autoSave {
            guard let toSync = entityToSync else { return }

            Task {
                do {
                    try await viewModel.sync(entity: toSync)
                    await MainActor.run {
                        viewModel.errorMessage = nil
                        viewModel.showSuccessToast = true
                        withAnimation { isPresented = false }
                    }
                } catch {
                    await MainActor.run {
                        viewModel.errorMessage = "KO"
                        viewModel.showSuccessToast = true
                    }
                }
            }
       }

        withAnimation { isPresented = false }
    }
     private func populateForm() {
        {{#header}}
            if entity == nil, let acc = current{{headerUpperCase}} {
                {{headerLowerCase}}LocalId = acc.id
                {{headerLowerCase}} = acc.remoteId
                selected{{headerUpperCase}} = acc
            }
        {{/header}}
        {{#hasCategory}}
        if selectedCategory == nil {
                let categories = try? modelContext.fetch(FetchDescriptor<Category>())
                if let lastId = lastUsedCategoryId,
                   let found = categories?.first(where: { $0.id == lastId }) {
                    selectedCategory = found
                    category = found.remoteId
                    categoryLocalId = found.id
                } else if let first = categories?.first {
                    selectedCategory = first
                    category = first.remoteId
                    categoryLocalId = first.id
                }
            }
        {{/hasCategory}}

                if let e = entity {
                    {{#fields}}
            {{name}} = e.{{name}}

            {{#isDouble}}
            {{name}}String = String(format: "%.0f", e.{{name}} ?? 0.0)
            {{/isDouble}}
        {{/fields}}
                }
         {{#hasCategory}}
        type{{entity}}Raw = selectedCategory?.typeCategoryRaw ?? "NA"
         {{/hasCategory}}

{{#fields}}
    {{#isDouble}}
         if entity == nil {
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
                    is{{nameCapitalized}}Focused = true
                }
            }
{{/isDouble}}

{{/fields}}
      }


}