import SwiftUI
import SwiftData

struct {{entity}}RowView: View {
    let entity: {{entity}}

        @Environment(\.colorScheme) var colorScheme

           private var rowBackgroundColor: Color {
        colorScheme == .dark ? .black : Color(UIColor.secondarySystemBackground)
    }

{{#hasType}}
  private var customTextColor: Color {
        entity.type{{entity}}Raw == {{entity}}Type.type2.rawValue ? .red : .green
    }
    {{/hasType}}
    var body: some View {
        HStack(alignment: .top) {
            VStack(alignment: .leading, spacing: 4) {
             iconView
                    .frame(width: 32, height: 32)
                    .padding(.top, 4)
                }
             VStack(alignment: .leading, spacing: 2) {
                    {{#fieldsDisplayed}}
                        Text(t(entity.{{name}} ?? "no {{name}}"))
                            .font(.caption)
                            .fontWeight(.bold)
                            .foregroundColor(.secondary)
                    {{/fieldsDisplayed}}
                    {{#hasDate}}
                         if let dateEntity = entity.date{{entity}} {
                Text(" \(formattedDate(dateEntity))")
                    .font(.caption2)
                    .foregroundColor(.gray)
                 }
                    {{/hasDate}}
                {{^hasDate}}
                    if let updatedAt = entity.updatedAt {
                    Text(" \(formattedDate(updatedAt))")
                        .font(.caption2)
                        .foregroundColor(.gray)
                     }
                 {{/hasDate}}
                 Label {
                     Text(statusText)
                    } icon: {
                        Image(systemName: statusIcon)
                    }{{#hasType}}
                    .foregroundColor(customTextColor){{/hasType}}
                    .font(.caption)
            }
             Spacer()
            VStack(alignment: .leading, spacing: 6) {
                HStack {
                      {{#fieldsAmount}}
                            Text("\(entity.{{name}}, specifier: "%.0f")")
                            .font(.subheadline)
                            .bold()
                            {{#hasType}}
                            .foregroundColor(customTextColor){{/hasType}}
                    {{/fieldsAmount}}
                }
            }
        }
        .padding(.vertical, 8)
        .padding(.horizontal)
    }

    private var iconView: some View {
        Image(systemName: "cube.box")
            .resizable()
            .scaledToFit()
            .foregroundColor(.accentColor)
    }

    private var statusText: String {
        switch entity.status {
        case .sync: t("Synchronisé")
        case .syncing: t("En cours")
        case .failed: t("Echoué")
        case .create: t("Nouveau")
        case .update: t("Modifié")
        case .delete, .trash: t("Supprimé")
        }
    }

    private var statusIcon: String {
        switch entity.status {
        case .sync: "checkmark.seal.fill"
        case .syncing: "arrow.triangle.2.circlepath"
        case .failed: "xmark.octagon.fill"
        case .create: "sparkles"
        case .update: "pencil.circle.fill"
        case .delete, .trash: "trash.fill"
        }
    }

    private var statusColor: Color {
        switch entity.status {
        case .sync: .green
        case .syncing: .blue
        case .failed: .red
        case .create: .gray
        case .update: .orange
        case .delete, .trash: .black
        }
    }

    private func formattedDate(_ date: Date?) -> String {
        guard let date else { return "-" }
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        formatter.timeStyle = .short
        return formatter.string(from: date)
    }
}
