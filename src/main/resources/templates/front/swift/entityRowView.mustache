import SwiftData
import SwiftUI

struct {{entity}}RowView: View {
    var entity: {{entity}}

    var body: some View {
        HStack(alignment: .top, spacing: 12) {
            iconView
                .frame(width: 32, height: 32)
                .padding(.top, 4)

            VStack(alignment: .leading, spacing: 6) {
                HStack {
                    {{#fields}}
    {{#isDisplayName}}
                            Text(entity.{{name}})
                                .font(.headline)
                                .lineLimit(1)
                        {{/isDisplayName}}
{{/fields}}

                    Spacer()

                    Image(systemName: entity.status == .sync ? "checkmark.seal.fill" : "icloud.slash")
                        .foregroundColor(entity.status == .sync ? .green : .orange)
                        .font(.caption)
                }

                {{#fields}}
    {{#isUpdatedAt}}
        {{#nullable}}
                            if let updatedAt = entity.{{name}} {
                                Text("Updated: \(formattedDate(updatedAt))")
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                        {{/nullable}}
        {{^nullable}}
                            Text("Updated: \(formattedDate(entity.{{name}}))")
                                .font(.caption)
                                .foregroundColor(.gray)
                        {{/nullable}}
    {{/isUpdatedAt}}
{{/fields}}
            }

            Spacer()
        }
        .padding(.vertical, 8)
    }

    private var iconView: some View {
        {{#fields}}
    {{#isIcon}}
                if let systemIcon = UIImage(systemName: entity.{{name}}), !entity.{{name}}.isEmpty {
                    Image(systemName: entity.{{name}})
                        .resizable()
                        .scaledToFit()
                        .foregroundColor(.accentColor)
                } else if !entity.{{name}}.isEmpty {
                    Image(entity.{{name}})
                        .resizable()
                        .scaledToFit()
                } else {
                    Image(systemName: "questionmark.circle")
                        .resizable()
                        .scaledToFit()
                        .foregroundColor(.gray.opacity(0.5))
                }
            {{/isIcon}}
{{/fields}}
Image(systemName: "cube.box")
            .resizable()
            .scaledToFit()
            .foregroundColor(.accentColor)
    }

    private func formattedDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        formatter.timeStyle = .short
        return formatter.string(from: date)
    }
}
