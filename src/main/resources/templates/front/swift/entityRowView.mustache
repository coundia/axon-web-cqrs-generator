import SwiftUI
import SwiftData

struct {{entity}}RowView: View {
    let entity: {{entity}}

        @Environment(\.colorScheme) var colorScheme

           private var rowBackgroundColor: Color {
        colorScheme == .dark ? .black : Color(UIColor.secondarySystemBackground)
    }

  private var customTextColor: Color {
        entity.type{{entity}}Raw == {{entity}}Type.type2.rawValue ? .red : .green
    }


    var body: some View {
        HStack(alignment: .top, spacing: 12) {
         VStack(alignment: .leading, spacing: 2) {

          Label {
                        Text(statusText)
                    } icon: {
                        Image(systemName: statusIcon)
                    }
                    .foregroundColor(customTextColor)
                    .font(.caption)

                iconView
                    .frame(width: 32, height: 32)
                    .padding(.top, 4)


                }
             VStack(alignment: .leading, spacing: 2) {
                    {{#fieldsDisplayed}}
                        Text(entity.{{name}} ?? "no {{name}}")
                            .font(.caption)
                            .fontWeight(.bold)
                            .foregroundColor(.secondary)
                    {{/fieldsDisplayed}}
                if let updatedAt = entity.updatedAt {
                Text(" \(formattedDate(updatedAt))")
                    .font(.caption2)
                    .foregroundColor(.gray)
                 }
            }
            VStack(alignment: .leading, spacing: 6) {
                HStack {

                      {{#fieldsAmount}}
                       Spacer()
                            Text("\(entity.{{name}}, specifier: "%.0f")")
                            .font(.subheadline)
                            .bold()
                            .foregroundColor(customTextColor)
                    {{/fieldsAmount}}
                }
            }
        }
        .padding(.vertical, 8)
        .background(rowBackgroundColor)
    }

    private var iconView: some View {
        Image(systemName: "cube.box")
            .resizable()
            .scaledToFit()
            .foregroundColor(.accentColor)
    }

    private var statusText: String {
        switch entity.status {
        case .sync: "Synced"
        case .syncing: "Syncing"
        case .failed: "Failed"
        case .create: "Created"
        case .update: "Modified"
        case .delete, .trash: "Deleted"
        }
    }

    private var statusIcon: String {
        switch entity.status {
        case .sync: "checkmark.seal.fill"
        case .syncing: "arrow.triangle.2.circlepath"
        case .failed: "xmark.octagon.fill"
        case .create: "sparkles"
        case .update: "pencil.circle.fill"
        case .delete, .trash: "trash.fill"
        }
    }

    private var statusColor: Color {
        switch entity.status {
        case .sync: .green
        case .syncing: .blue
        case .failed: .red
        case .create: .gray
        case .update: .orange
        case .delete, .trash: .black
        }
    }

    private func formattedDate(_ date: Date?) -> String {
        guard let date else { return "-" }
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        formatter.timeStyle = .short
        return formatter.string(from: date)
    }
}
