import SwiftData
import Foundation
import SwiftUI

enum {{entity}}Type: String, Codable, CaseIterable {
    case type1 = "Type1"
    case type2 = "Type2"
}

@Model
final class {{entity}} {
    @Attribute(.unique) var id: String
    {{#fields}}
	{{^isId}}var {{name}}: {{realType}}{{#nullable}}?{{/nullable}}{{/isId}}
{{/fields}}

    var user: User?
    var statusRaw: String
    var order: Int
    var deletedAt: Date?
    var remoteId: String?
    var syncAt: Date?

    var type{{entity}}: {{entity}}Type

    var status: {{entity}}Status {
        get { {{entity}}Status(rawValue: statusRaw) ?? .create }
        set { statusRaw = newValue.rawValue }
    }

    init(
        {{#fields}}
	{{^isId}}{{name}}: {{realType}}{{#nullable}}? = nil{{/nullable}}{{^nullable}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{/nullable}},
        {{/isId}}{{/fields}}
        type{{entity}}: {{entity}}Type = .type1,
        order: Int = 0
    ) {
        self.id = UUID().uuidString
        {{#fields}}{{^isId}}self.{{name}} = {{name}}{{#last}}{{else}},{{/last}}
{{/isId}}{{/fields}}

        self.statusRaw = type{{entity}}.create.rawValue


    }
}
