import SwiftData
import Foundation
import SwiftUI

enum {{entity}}Type: String, Codable, CaseIterable {
    case type1 = "IN"
    case type2 = "OUT"
}

@Model
final class {{entity}} {
    @Attribute(.unique) var id: String
    {{#fields}}
    {{^isId}}var {{name}}: {{realType}}{{#nullable}}?{{/nullable}}{{/isId}}

    {{#isManyToOne}}
          var {{name}}LocalId: {{realType}}{{#nullable}}?{{/nullable}}
    {{/isManyToOne}}
{{/fields}}

    var user: User?

    var createdBy: String?
    var tenant: String?

    var statusRaw: String
    var order: Int
    var deletedAt: Date?
    var remoteId: String?
    var syncAt: Date?

    var type{{entity}}: {{entity}}Type

    var status: {{entity}}Status {
        get { {{entity}}Status(rawValue: statusRaw) ?? .create }
        set { statusRaw = newValue.rawValue }
    }

    init(
        {{#fields}}
    {{^isId}}
        {{name}}: {{realType}}{{#nullable}}? = nil{{/nullable}}{{^nullable}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{/nullable}},
             {{/isId}}
{{/fields}}
                type{{entity}}: {{entity}}Type = .type1,
                order: Int = 0
            ) {
                self.id = UUID().uuidString
        {{#fields}}
    {{^isId}}
            self.{{name}} = {{name}}{{#isLowerCase}}.lowercased(){{/isLowerCase}}
    {{/isId}}
    {{#isManyToOne}}
                self.{{name}}LocalId = {{name}}
    {{/isManyToOne}}
{{/fields}}
        self.type{{entity}} = type{{entity}}
        self.order = order
        self.statusRaw = {{entity}}Status.create.rawValue
    }
}
