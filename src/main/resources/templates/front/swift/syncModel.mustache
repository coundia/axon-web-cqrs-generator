import SwiftUI
import SwiftData

extension {{entity}}ListViewModel {

    func pullThenSyncEntities() async {
        print("[pullThenSyncEntities]")
            let manager = {{entity}}PullService(modelContext: modelContext, user: user)
            do {
            try await manager.pullAndMerge{{entity}}s()
                await MainActor.run { _ = fetchEntitiesUnSynced() }
                await syncAllEntities()
            } catch {
            await MainActor.run {
                errorMessage = mapError(error)
                showErrorToast = true
            }
        }
    }


    func syncAllEntities() async {
        let unsynced = fetchEntitiesUnSynced()

        let deltas: [{{entity}}DeltaDto] = unsynced.map {
        {{entity}}DeltaDto(
        id: $0.remoteId ?? "null",
        {{#fields}}
            {{^isId}}
                {{name}}: $0.{{name}},
        {{/isId}}
        {{/fields}}
        type: $0.statusRaw
        )
        }

        let useCase = Sync{{entity}}UseCase()
        do {
             try await useCase.execute(with: deltas)
        for item in unsynced {
         item.syncAt = Date()
            if(item.status != .sync && item.status != .delete) {
                item.status = .syncing
            }

        }
         saveContext()
          await MainActor.run { self.showSuccessToast = true }
        } catch {
            await MainActor.run {
                self.errorMessage = mapError(error)
                self.showErrorToast = true
            }
        }
    }


    func fetchEntitiesUnSynced() -> [{{entity}}] {
            print("[fetchEntitiesUnSynced]")
             let descriptor = FetchDescriptor<{{entity}}>(
              predicate: #Predicate {
                      $0.user?.username == username && $0.statusRaw != "SYNC" && $0.statusRaw != "SYNCING"
            },
                sortBy: [SortDescriptor(\.updatedAt, order: .reverse)]
            )
            do {
              return try modelContext.fetch(descriptor)
            } catch {
            errorMessage = mapError(error)
            return []
        }
    }

}