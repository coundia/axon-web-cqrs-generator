import SwiftData
import SwiftUI

extension {{entity}}ListViewModel {

    @MainActor
    func markDeleted(_ item: {{entity}}) {

    print("[markDeleted]  \(item.id) ")

        if item.statusRaw == {{entity}}Status.delete.rawValue || item.remoteId == nil {
            purge(item)
            saveContext()
            fetchEntities()
            return
        }

        item.status     = .delete
        item.deletedAt  = Date()
        item.updatedAt  = Date()
        item.syncAt     = nil
        saveContext()

        fetchEntities()
    }

    @MainActor
    func restore(_ item: {{entity}}) {

        print("[restore]  \(item.id) ")

        item.deletedAt  = nil
        item.status     = .create
        item.updatedAt  = Date()
        saveContext()

        fetchTrashed()
    }

    @MainActor
    func purge(_ item: {{entity}}) {

        print("[purge]  \(item.id) ")

        modelContext.delete(item)
        saveContext()

        fetchTrashed()
    }

    @MainActor
    func fetchTrashed() {

    print("[fetchTrashed]  ")

        isLoading = true
        let descriptor = FetchDescriptor<{{entity}}>(
            predicate: #Predicate { $0.user?.username == username && $0.deletedAt != nil },
            sortBy:    [SortDescriptor(\.deletedAt, order: .reverse)]
        )
        do   { entities = try modelContext.fetch(descriptor) }
        catch{ errorMessage = mapError(error)               }
        isLoading = false
    }
}
