import SwiftUI
import SwiftData

struct {{entity}}EditView: View {

    @Binding var isShared: Bool
    @Binding var isPresented: Bool
    @Binding var entity: {{entity}}?

    @State private var showAlert = false
    @State private var alertMessage = ""

    var viewModel: {{entity}}ListViewModel

    {{#fields}}
    @State private var {{name}}: {{realType}}{{#nullable}}? = nil{{/nullable}}{{^nullable}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{/nullable}}
{{/fields}}

    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("{{entity}} Information")) {
                    {{#fields}}
                    {{^readOnly}}
                        {{> SwiftFieldInput }}
                    {{/readOnly}}
                {{/fields}}
                }

                Section {
                    Button("Save", action: handleSave)
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(8)
                }
            }
            .navigationTitle(getTitle())
             .alert(isPresented: $showAlert) {
                Alert(title: Text("Info"), message: Text(alertMessage), dismissButton: .default(Text("OK")))
            }
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("Cancel") { withAnimation { isPresented = false } }
                }
            }
            .onAppear(perform: populateForm)
            .onChange(of: entity) { _ in populateForm() }
        }
    }

    private func handleSave() {
        if let e = entity {
            viewModel.updateEntity(e,
                {{#fields}}
    {{name}}: {{#nullable}}{{name}} ?? {{#isText}}""{{/isText}}{{#isInt}}0{{/isInt}}{{#isDouble}}0.0{{/isDouble}}{{#isBool}}false{{/isBool}}{{#isDate}}Date(){{/isDate}}{{/nullable}}{{^nullable}}{{name}}{{/nullable}},
                {{/fields}}
            )

              if isShared {
                Task {
                        do {
                            try await viewModel.sync(entity: e)
                            await MainActor.run {
                                alertMessage = viewModel.errorMessage ?? "OK"
                                showAlert = true
                            }
                        } catch {
                            await MainActor.run {
                                alertMessage = viewModel.errorMessage ?? "KO"
                                showAlert = true
                             }
                        }
                    }
            } else {
                withAnimation { isPresented = false }
            }

        } else {
            viewModel.createEntity(
                {{#fields}}
    {{^isId}}
        {{name}}: {{#nullable}}{{name}} ?? {{#isText}}""{{/isText}}{{#isInt}}0{{/isInt}}{{#isDouble}}0.0{{/isDouble}}{{#isBool}}false{{/isBool}}{{#isDate}}Date(){{/isDate}}{{/nullable}}{{^nullable}}{{name}}{{/nullable}},
             {{/isId}}   {{/fields}}
            )
        }
    }

    private func populateForm() {
        if let e = entity {
            {{#fields}}
    {{name}} = e.{{name}}
{{/fields}}
        } else {
            {{#fields}}
    {{name}} = {{#nullable}}nil{{/nullable}}{{^nullable}}{{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{/nullable}}
{{/fields}}
        }
    }

    private func getTitle() -> String {
        if(isShared){
            return "Share {{entity}}"
        }

        if let e = entity {
            return "Edit \(e.name ?? "")"
        } else {
            return "New {{entity}}"
        }
    }
}