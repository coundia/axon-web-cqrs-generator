import SwiftUI

struct {{entity}}ListContentView: View {
    let {{entityLowerCase}}s: [{{entity}}]
    let onSelect: ({{entity}}) -> Void
    let onDelete: ({{entity}}) -> Void
    let onAdd: () -> Void
    let onLoadMore: ({{entity}}) -> Void
    let onDuplicate: ({{entity}}) -> Void
    let onEdit: ({{entity}}) -> Void

    var body: some View {
        let active = {{entityLowerCase}}s.filter { $0.deletedAt == nil }

        if active.isEmpty {
            {{entity}}EmptyStateView(onAdd: onAdd)
        } else {
            ScrollView {
                LazyVStack(spacing: 0) {

                    ForEach(active, id: \.id) { item in
                        {{entity}}RowView(entity: item)
                            .contentShape(Rectangle())
                            .onTapGesture {
                                onSelect(item)
                            }
                            .contextMenu {

                                Button {
                                    onEdit(item)
                                } label: {
                                    Label("Edit", systemImage: "pencil")
                                }

                                Button {
                                    onDuplicate(item)
                                } label: {
                                    Label("Duplicate", systemImage: "doc.on.doc")
                                }

                                Button(role: .destructive) {
                                    onDelete(item)
                                } label: {
                                    Label("Delete", systemImage: "trash")
                                }
                            }
                            .onAppear {
                                if item == active.last {
                                    onLoadMore(item)
                                }
                            }

                        Divider()
                    }
                    Color.clear
                        .frame(height: 1)
                        .id("bottom")
                }
                .padding(.horizontal)
            }
        }
    }
}
