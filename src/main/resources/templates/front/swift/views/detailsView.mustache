import SwiftUI
import SwiftData

struct {{entity}}DetailsView: View {
    let {{entityLowerCase}}: {{entity}}
    var user: User
    var onEdit: (() -> Void)? = nil
    var onDelete: (() -> Void)? = nil
    var onDuplicate: (() -> Void)? = nil

    @StateObject var viewModel: {{entity}}ListViewModel

    @Environment(\.dismiss) private var dismiss
    @Environment(\.modelContext) private var modelContext

    @State private var showCreateUser = false
    {{#shared}}
    @State private var selectedUser: {{entity}}User? = {{entity}}User()
    {{/shared}}
    @State private var isSyncing = false
    @State private var syncMessage: String? = nil

    var body: some View {
        ScrollView {
            VStack(spacing: 24) {
                header
                section(title: t("Information"), content: overviewSection)
                section(title: t("Détails"), content: metaSection)

                if let msg = syncMessage {
                    Text(msg)
                        .font(.subheadline)
                        .foregroundColor(.blue)
                }
            }
            .padding()
        }
        .navigationTitle("{{entity}} Info")
        .navigationBarTitleDisplayMode(.inline)
        .background(Color(.systemGroupedBackground).ignoresSafeArea())
        .toolbar {
            ToolbarItem(placement: .cancellationAction) {
                Button("Close") {
                    dismiss()
                }
            }
        }
       /* .alert("✅ Synced", isPresented: $viewModel.showSuccessToast) {
            Button("OK", role: .cancel) {}
        }*/
        {{#shared}}
        .sheet(isPresented: $showCreateUser) {
            {{entity}}UserEditView(
                 isShared: .constant(true),
                isPresented: $showCreateUser,
                entity: $selectedUser,
                viewModel: {{entity}}UserListViewModel(modelContext: modelContext, user: user)

            )
        }
        {{/shared}}
    }

    private var header: some View {
        HStack(spacing: 16) {
            Image(systemName: "person.crop.circle")
                .resizable()
                .scaledToFit()
                .frame(width: 52, height: 52)
                .padding()
                .background(Circle().fill(Color.blue.opacity(0.1)))
                .foregroundColor(.blue)

            VStack(alignment: .leading, spacing: 4) {
                Text({{entityLowerCase}}.name ?? "No name")
                    .font(.title2.bold())
                Text({{entityLowerCase}}.details ?? "No details")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
            }

            Spacer()

            Menu {

                {{#shared}}
                Button(t("Partager"), systemImage: "square.and.arrow.up") {
                    selectedUser = {{entity}}User()
                    selectedUser?.{{entityLowerCase}} = {{entityLowerCase}}.remoteId
                    selectedUser?.name = {{entityLowerCase}}.name
                    selectedUser?.status = .create
                    showCreateUser = true
                }
                {{/shared}}
                Button(t("Copier ID"), systemImage: "doc.on.doc") {
                    UIPasteboard.general.string = {{entityLowerCase}}.remoteId
                }
                Button("Sync", systemImage: "arrow.triangle.2.circlepath") {
                    Task {
                         await viewModel.sync(entity:{{entityLowerCase}})
                         await viewModel.pull()
                    }
                }
                Button("Fermer", systemImage: "xmark") {
                    dismiss()
                }

            } label: {
                Image(systemName: "ellipsis.circle")
                    .font(.title3)
                    .foregroundColor(.gray)
            }
        }
        .padding()
        .background(RoundedRectangle(cornerRadius: 16).fill(Color(.systemBackground)))
        .shadow(radius: 1)
    }

    private func section(title: String, content: some View) -> some View {
        VStack(alignment: .leading, spacing: 12) {
            Text(title)
                .font(.headline)
                .foregroundColor(.gray)
            content
        }
    }

    private var overviewSection: some View {
        VStack(spacing: 12) {
            {{#fields}}
    {{#isDisplayName}}
    {{#isText}}
            detailItem(icon: "person.text.rectangle", title: t("{{displayName}}"), value: {{entityLowerCase}}.{{name}} ?? "-")
{{/isText}}
    {{#isInt}}
            detailItem(icon: "number", title: t("{{displayName}}"), value: String({{entityLowerCase}}.{{name}}))
            {{/isInt}}
    {{#isFloat}}
            detailItem(icon: "number", title: t("{{displayName}}"), value: String(format: "%.2f", {{entityLowerCase}}.{{name}}))
            {{/isFloat}}
    {{#isString}}
            detailItem(icon: "textformat", title: t("{{displayName}}"), value: {{entityLowerCase}}.{{name}} ?? "-")
            {{/isString}}
    {{#isDouble}}
            detailItem(icon: "dollarsign.circle", title: t("{{displayName}}"), value: String(format: "%.2f", {{entityLowerCase}}.{{name}}))
            {{/isDouble}}
    {{#isBool}}
            detailItem(icon: "checkmark.circle", title: t("{{displayName}}"), value: {{entityLowerCase}}.{{name}} ? t("Oui") : t("Non"))
            {{/isBool}}
    {{#isDate}}
        detailItem(icon: "calendar", title: t("{{displayName}}"), value: formatDate({{entityLowerCase}}.{{name}}))
            {{/isDate}}

    {{/isDisplayName}}
{{/fields}}


        }
        .padding()
        .background(RoundedRectangle(cornerRadius: 12).fill(Color(.secondarySystemBackground)))
    }

    private var metaSection: some View {
        VStack(spacing: 12) {
            {{#fields}}
    {{#isId}}
            detailItem(icon: "info.circle", title: "Id", value: {{entityLowerCase}}.id ?? "-")
            detailItem(icon: "info.circle", title: t("Id dans le serveur"), value: {{entityLowerCase}}.remoteId ?? "-")
            {{/isId}}
    {{#isUpdatedAt}}
            detailItem(icon: "clock", title: t("Date Mise à jour"), value: formatDate({{entityLowerCase}}.{{name}}))
            {{/isUpdatedAt}}
{{/fields}}

        detailItem(icon: "person.text.rectangle", title: t("Crée par"),  value: {{entityLowerCase}}.user?.username ?? "-")

         }
        .padding()
        .background(RoundedRectangle(cornerRadius: 12).fill(Color(.secondarySystemBackground)))
    }

    private func detailItem(icon: String, title: String, value: String) -> some View {
        HStack(spacing: 16) {
            Image(systemName: icon)
                .frame(width: 28)
                .foregroundColor(.blue)
            VStack(alignment: .leading, spacing: 4) {
                Text(t(title))
                    .font(.caption)
                    .foregroundColor(.gray)
                Text(t(value))
                    .font(.body)
            }
            Spacer()
        }
    }

    private func formatDate(_ date: Date?) -> String {
        guard let date = date else { return "-" }
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        formatter.timeStyle = .short
        return formatter.string(from: date)
    }
}