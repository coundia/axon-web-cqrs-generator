import SwiftUI
import SwiftData

struct {{entity}}DetailsView: View {
    let entity: {{entity}}
    var onEdit: (() -> Void)? = nil
    var onDelete: (() -> Void)? = nil
    var onDuplicate: (() -> Void)? = nil

    @Environment(\.dismiss) private var dismiss

    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 16) {
                HStack(spacing: 12) {
                    Button(action: { dismiss() }) {
                        Image(systemName: "xmark.circle.fill")
                            .font(.title2)
                            .foregroundColor(.secondary)
                    }

                    Spacer()

                    if let onEdit = onEdit {
                        Button(action: onEdit) {
                            Label("Edit", systemImage: "pencil")
                                .font(.subheadline)
                        }
                    }

                    if let onDuplicate = onDuplicate {
                        Button(action: onDuplicate) {
                            Label("Duplicate", systemImage: "doc.on.doc")
                                .font(.subheadline)
                        }
                    }

                    if let onDelete = onDelete {
                        Button(role: .destructive, action: onDelete) {
                            Label("Delete", systemImage: "trash")
                                .font(.subheadline)
                        }
                    }
                }

                Text("{{title}}")
                    .font(.largeTitle.bold())
                    .padding(.bottom)

                {{#fields}}
                {{#displayName}}
                detailRow(
                    title: "{{displayName}}",
                    value: {{> SwiftFieldDisplayValue }}
                )
                Divider()
                {{/displayName}}
            {{/fields}}
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 16)
                    .fill(Color(UIColor.secondarySystemBackground))
                    .shadow(radius: 4)
            )
            .padding()
        }
        .navigationTitle("{{entity}} Info")
        .navigationBarTitleDisplayMode(.inline)
    }

    @ViewBuilder
    private func detailRow(title: String, value: String) -> some View {
        VStack(alignment: .leading, spacing: 4) {
            Text(title)
                .font(.caption)
                .foregroundColor(.gray)
            Text(value)
                .font(.body)
                .foregroundColor(.primary)
        }
    }
}
