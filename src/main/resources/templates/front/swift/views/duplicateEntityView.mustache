import SwiftUI
import SwiftData

struct Duplicate{{entity}}View: View {
    var original: {{entity}}
    var onSave: ({{entity}}) -> Void
    @Environment(\.dismiss) var dismiss

    {{#fields}}
    @State private var {{nameLowerCase}}: {{realType}}
{{/fields}}

    init(original: {{entity}}, onSave: @escaping ({{entity}}) -> Void) {
        self.original = original
        self.onSave = onSave
        {{#fields}}
        _{{nameLowerCase}} = State(initialValue: original.{{name}} {{#nullable}}?? {{#isText}}""{{/isText}}{{#isInt}}0{{/isInt}}{{#isDouble}}0.0{{/isDouble}}{{#isBool}}false{{/isBool}}{{#isDate}}Date(){{/isDate}}{{/nullable}})
        {{/fields}}
    }

    var body: some View {
        NavigationView {
            Form {
                Section(header: Text(t("Duplication {{entity}}"))) {
                    {{#fields}}
                    {{^readOnly}}
                        {{> SwiftFieldInput }}
                    {{/readOnly}}
                {{/fields}}
                }

                Section {
                    Button("Save") {
                    print("[Save]  ")
                        let duplicate = {{entity}}(
                            {{#fields}}
                                {{^isId}}
                                    {{name}}: {{nameLowerCase}},
                                                        {{/isId}}
                            {{/fields}}
                        )
                        duplicate.status = .create
                        duplicate.id = UUID().uuidString
                        duplicate.reference = UUID().uuidString
                        duplicate.updatedAt = Date()

                        onSave(duplicate)
                        dismiss()
                    }
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color("TenantColorPrimary"))
                    .foregroundColor(.white)
                    .cornerRadius(8)
                }
            }
            .navigationTitle("Duplicate {{entity}}")
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("Cancel") {
                        dismiss()
                    }
                }
            }
        }
    }
}
