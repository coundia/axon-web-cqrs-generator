import SwiftUI
import SwiftData

struct {{entity}}ListView: View {
    @Environment(\.modelContext) private var modelContext
    @StateObject private var viewModel: {{entity}}ListViewModel
    @State private var showForm = false
    @State private var selected: {{entity}}? = nil
    @State private var isSyncing = false
    @State private var showingTrash = false

    init(modelContext: ModelContext, user: User) {
        _viewModel = StateObject(
            wrappedValue: {{entity}}ListViewModel(
                modelContext: modelContext,
                user: user
            )
        )
    }

    var body: some View {
        NavigationView {
            ZStack {
                if showingTrash {
                    {{entity}}TrashContentView(viewModel: viewModel)
                } else {
                    {{entity}}ListContentView(
                        {{entityLowerCase}}s: viewModel.entities,
                        onSelect: { item in
                            selected = item
                            showForm = true
                        },
                        onDelete: viewModel.markDeleted,
                        onAdd: { showForm = true },
                        onLoadMore: viewModel.loadMore{{entity}}sIfNeeded,
                        onDuplicate: viewModel.duplicate
                    )
                }

                if isSyncing {
                    ProgressView("Syncing…")
                        .padding()
                        .background(.ultraThinMaterial)
                        .cornerRadius(12)
                        .shadow(radius: 8)
                }

                if viewModel.showSuccessToast {
                    ToastView(message: "✅ Sync successful", color: .green)
                }
                if viewModel.showErrorToast {
                    ToastView(
                        message: "❌ \(viewModel.errorMessage ?? "Unknown error")",
                        color: .red
                    )
                }
            }
            .navigationTitle(showingTrash ? "Corbeille" : "{{entity}}s")
            .toolbar {
                {{entity}}MenuView(
                    showingTrash: $showingTrash,
                    isSyncing: $isSyncing,
                    showForm: $showForm,
                    syncAction: viewModel.pullThenSyncEntities
                )
            }
            .sheet(isPresented: $showForm, onDismiss: {
                viewModel.fetchEntities()
            }) {
                {{entity}}FormView(
                    isPresented: $showForm,
                    entity: $selected,
                    viewModel: viewModel
                )
            }
            .onAppear { viewModel.fetchEntities() }
            .onChange(of: viewModel.showSuccessToast) { value in
                if value {
                    DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
                        viewModel.showSuccessToast = false
                    }
                }
            }
            .onChange(of: viewModel.showErrorToast) { value in
                if value {
                    DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
                        viewModel.showErrorToast = false
                    }
                }
            }
        }
    }
}
