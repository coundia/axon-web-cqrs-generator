import SwiftUI
import SwiftData

struct {{entity}}ListView: View {
    @Environment(\.modelContext) private var modelContext
    private let user: User

    @StateObject private var viewModel: {{entity}}ListViewModel
    @StateObject private var accountViewModel: AccountListViewModel
    @State private var selectedAccount: Account?
    @State private var showAccountPicker = false
    @State private var showForm = false
    @State private var selected: {{entity}}?
    @State private var selectedForDuplicate: IdentifiableWrapper<{{entity}}>?
    @State private var selectedForDetails: IdentifiableWrapper<{{entity}}>?
    @State private var selectedForDelete: {{entity}}?
    @State private var isSyncing = false
    @State private var showingTrash = false

    init(modelContext: ModelContext, user: User) {
        self.user = user
        _viewModel = StateObject(wrappedValue: {{entity}}ListViewModel(modelContext: modelContext, user: user))
        _accountViewModel = StateObject(wrappedValue: AccountListViewModel(modelContext: modelContext, user: user))
    }

    var body: some View {
        NavigationView {
            ZStack {
                VStack(spacing: 8) {

                  Text( String(format: "%.0f", selectedAccount?.currentBalance ?? 0.0))

                    Button { showAccountPicker = true } label: {
                        HStack {
                            Text(selectedAccount?.name ?? "Select Account")
                                .font(.headline)
                            Spacer()
                            Image(systemName: "chevron.down")
                        }
                        .padding(8)
                        .background(Color(.systemGray6))
                        .cornerRadius(8)
                    }
                    .sheet(isPresented: $showAccountPicker) {
                        AccountPickerView(
                            selectedAccount: $selectedAccount,
                            viewModel: accountViewModel
                        )
                    }

                    if showingTrash {
                        {{entity}}TrashContentView(viewModel: viewModel)
                    } else {
                        {{entity}}ListContentView(
                            {{entityLowerCase}}s: viewModel.entities.filter { {{entityLowerCase}} in
                                guard let acct = selectedAccount else { return true }
                                return {{entityLowerCase}}.account == acct.remoteId
                            },
                            onSelect: { item in selectedForDetails = .init(item) },
                            onDelete: { item in selectedForDelete = item },
                            onAdd: { selected = nil; showForm = true },
                            onLoadMore: viewModel.loadMore{{entity}}sIfNeeded,
                            onDuplicate: { item in selectedForDuplicate = .init(item) },
                            onEdit: { item in selected = item; showForm = true }
                        )
                    }
                }

                if isSyncing {
                    ProgressView("Syncing…")
                        .padding()
                        .background(.ultraThinMaterial)
                        .cornerRadius(12)
                        .shadow(radius: 8)
                }

                if viewModel.showSuccessToast {
                    ToastView(message: "✅ Sync successful", color: .green)
                        .onAppear {
                            DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
                                viewModel.showSuccessToast = false
                                Task { await viewModel.pull(); await viewModel.pull() }
                            }
                        }
                }

                if viewModel.showErrorToast {
                    ToastView(message: viewModel.errorMessage ?? "Unknown error", color: .yellow)
                        .onAppear {
                            DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
                                viewModel.showErrorToast = false
                            }
                        }
                }
            }
            .navigationTitle(showingTrash ? "Corbeille" : "{{entity}}s Management")
            .toolbar {
                {{entity}}MenuView(
                    showingTrash: $showingTrash,
                    isSyncing: $isSyncing,
                    showForm: $showForm,
                    syncAction: viewModel.sync
                )
            }
            .sheet(isPresented: $showForm) {
                {{entity}}FormView(isPresented: $showForm, entity: $selected, viewModel: viewModel)
            }
            .sheet(item: $selectedForDuplicate) { wrapper in
                Duplicate{{entity}}View(original: wrapper.value) { newItem in viewModel.insertDuplicated(newItem) }
            }
            .sheet(item: $selectedForDetails) { wrapper in
                {{entity}}DetailsView(
                    {{entityLowerCase}}: wrapper.value,
                    user: user,
                    onEdit: { selected = wrapper.value; showForm = true },
                    onDelete: { selectedForDelete = wrapper.value },
                    onDuplicate: { selectedForDuplicate = .init(wrapper.value) },
                    viewModel: viewModel
                )
            }
            .confirmationDialog(
                "Are you sure you want to delete this item?",
                isPresented: Binding(get: { selectedForDelete != nil }, set: { if !$0 { selectedForDelete = nil } }),
                titleVisibility: .visible
            ) {
                Button("Delete", role: .destructive) {
                    if let item = selectedForDelete { viewModel.markDeleted(item); selectedForDelete = nil }
                }
                Button("Cancel", role: .cancel) { selectedForDelete = nil }
            }
            .onChange(of: selectedAccount) { account in
                if let account { viewModel.fetchEntitiesByAccount(accountId: account.remoteId) }
                else { viewModel.fetchEntities() }
            }
            .onAppear {
                Task {
                    await accountViewModel.pull()
                      accountViewModel.fetchEntities()
                    await viewModel.pull()
                    
                    if selectedAccount == nil, let first = accountViewModel.entities.first {
                        selectedAccount = first
                    }
                }
            }
        }
    }
}

private struct IdentifiableWrapper<T>: Identifiable {
    let id = UUID()
    let value: T
    init(_ value: T) { self.value = value }
}
