import SwiftUI
import SwiftData

struct {{entity}}ListView: View {

@Environment(\.modelContext) private var modelContext
private let user: User
private let calendar = Calendar.current
@StateObject private var viewModel: {{entity}}ListViewModel
{{#header}}
@StateObject private var {{headerLowerCase}}ViewModel: {{headerUpperCase}}ListViewModel
@State private var selected{{headerUpperCase}}: {{headerUpperCase}}?
@State private var show{{headerUpperCase}}Picker = false
{{/header}}
@State private var showForm = false
@State private var selected: {{entity}}?
@State private var selectedForDuplicate: IdentifiableWrapper<{{entity}}>?
@State private var selectedForDetails: IdentifiableWrapper<{{entity}}>?
@State private var selectedForDelete: {{entity}}?
@State private var isSyncing = false
@State private var showingTrash = false


@State private var showSearch = false
@State private var searchText = ""
@State private var searchCriteria: {{entity}}SearchCriteria = .name

@State private var selectedMonth: Date = Date()
{{#header}}
@AppStorage("lastUsed{{headerUpperCase}}Id") private var lastUsed{{headerUpperCase}}Id: String?
{{/header}}
init(modelContext: ModelContext, user: User) {
    self.user = user
    _viewModel = StateObject(wrappedValue: {{entity}}ListViewModel(modelContext: modelContext, user: user))
    {{#header}}
    _{{headerLowerCase}}ViewModel = StateObject(wrappedValue: {{headerUpperCase}}ListViewModel(modelContext: modelContext, user: user))
    {{/header}}
}

private func startOfMonth(_ date: Date) -> Date {
    let components = calendar.dateComponents([.year, .month], from: date)
    return calendar.date(from: components) ?? date
}

var body: some View {
    NavigationView {
        VStack(spacing: 8) {

        GuestFeatureNoticeView(user: user)

        {{#header}}
            MonthSelectorCommunView(selectedMonth: $selectedMonth) { newMonth in
                let start = startOfMonth(newMonth)
                let end = calendar.date(byAdding: .month, value: 1, to: start)!.addingTimeInterval(-1)
                viewModel.selectedStartDate = start
                viewModel.selectedEndDate = end
            }
            .onChange(of: selected{{headerUpperCase}}) { acct in
                viewModel.current{{headerUpperCase}}Id = acct?.id

            }
            {{#hasSummary}}
        {{entity}}SummaryView({{entityLowerCase}}s: viewModel.filtered{{entity}}s, defaultCurrency: "")
        {{/hasSummary}}
            {{/header}}

             HStack {

                    Button {

                        Task {


                            isSyncing = true
                            await viewModel.sync()

                             {{#header}}
                            await {{headerLowerCase}}ViewModel.sync()
{{/header}}
                            isSyncing = false
                        }
                    } label: {
                        Image(systemName: "arrow.triangle.2.circlepath")
                            .font(.title2)
                            .foregroundColor(.accentColor)
                    }
                    .padding(.leading)


                    if !searchText.isEmpty {
                        Button {
                            searchText = ""
                            viewModel.searchText = ""
                            viewModel.fetchEntities()
                        } label: {
                            Label("Effacer: \"\(searchText)\"", systemImage: "xmark.circle.fill")
                                .foregroundColor(.red)
                                .font(.subheadline)
                        }
                        .padding(.leading)
                    }else{
                        //add notification here
                        if let name = user.name {
                               HStack(spacing: 4) {
                                 Text(t("Bienvenue ")+" : "+name)
                               }
                               .font(.subheadline)
                               .padding(.leading)
                               .padding(.trailing)
                           }
                    }

                    Spacer()

                    Button {
                        showForm = true
                    } label: {
                        Image(systemName: "plus.circle.fill")
                            .font(.title2)
                            .foregroundColor(.accentColor)
                    }
                    .padding(.trailing)
                }
                .padding(.vertical, 4)
                .background(Color(.systemGroupedBackground))
                .cornerRadius(10)
                .padding(.horizontal)

             if showingTrash {
                {{entity}}TrashContentView(viewModel: viewModel)
            } else {
                {{entity}}ListContentView(
                    {{entityLowerCase}}s: viewModel.filtered{{entity}}s,
                    onSelect: { item in selectedForDetails = .init(item) },
                    onDelete: { item in selectedForDelete = item },
                    onAdd: { selected = nil; showForm = true },
                    onLoadMore: viewModel.loadMore{{entity}}sIfNeeded,
                    onDuplicate: { item in selectedForDuplicate = .init(item) },
                    onEdit: { item in selected = item; showForm = true }
                )
            }
        }
        {{^header}}
         .navigationTitle(showingTrash ? "Corbeille" : "{{title}}")
        {{/header}}
        .toolbar {
            {{#header}}
             ToolbarItem(placement: .principal) {
                    Button { show{{headerUpperCase}}Picker = true } label: {
                        HStack {
                             VStack{

                             if user.isAnnonym == true {
                                        HStack(spacing: 4) {
                                            Image(systemName: "eye.slash")
                                                .foregroundColor(.gray)
                                            Text(t("Abonné"))
                                                .font(.caption2)
                                                .fontWeight(.bold)
                                                .foregroundColor(.white)
                                                .padding(.horizontal, 6)
                                                .padding(.vertical, 2)
                                                .background(Color.orange)
                                                .cornerRadius(6)
                                        }
                                    } else {
                                         Text("\(selected{{headerUpperCase}}?.currentBalance ?? 0.0 , specifier: "%.0f")")
                                    }

                                Text(selected{{headerUpperCase}}?.name ?? "Sélectionner {{headerUpperCase}}")

                            }
                        }
                        .cornerRadius(8)
                    }
                }

                {{/header}}
                ToolbarItem(placement: .navigationBarTrailing) {
                    {{entity}}MenuView(
                        showingTrash: $showingTrash,
                        isSyncing: $isSyncing,
                        showForm: $showForm,
                        syncAction: viewModel.sync,
                        showSearch: $showSearch
                    )
                }
            }
            {{#header}}
         .sheet(isPresented: $show{{headerUpperCase}}Picker, onDismiss: resetSheets) {
                    {{headerUpperCase}}PickerView(selected{{headerUpperCase}}: $selected{{headerUpperCase}}, viewModel: {{headerLowerCase}}ViewModel)
                }
                {{/header}}

        .sheet(isPresented: $showSearch) {
                Search{{entity}}View(
                    isPresented: $showSearch,
                    searchText: $searchText,
                    searchCriteria: $searchCriteria,
                    onSearch: {
                        viewModel.search{{entity}}s(text: searchText, by: searchCriteria)
                    }
                )
            }
        .sheet(isPresented: $showForm, onDismiss: {
        resetSheets()
        viewModel.fetchEntities()

        }) {
            {{entity}}FormView(
                isPresented: $showForm,
                entity: $selected,
                {{#header}}current{{headerUpperCase}}: $selected{{headerUpperCase}},{{/header}}
                viewModel: viewModel
            )
        }
        .sheet(item: $selectedForDuplicate, onDismiss: resetSheets) { wrapper in
            Duplicate{{entity}}View(original: wrapper.value) { newItem in viewModel.insertDuplicated(newItem) }
        }
        .sheet(item: $selectedForDetails, onDismiss: resetSheets) { wrapper in
            {{entity}}DetailsView(
                {{entityLowerCase}}: wrapper.value,
                user: user,
                onEdit: { selected = wrapper.value; showForm = true },
                onDelete: { selectedForDelete = wrapper.value },
                onDuplicate: { selectedForDuplicate = .init(wrapper.value) },
                viewModel: viewModel
            )
        }
        .confirmationDialog(
            t("Êtes-vous sûr de vouloir supprimer cet élément ?"),
            isPresented: Binding(get: { selectedForDelete != nil }, set: { if !$0 { selectedForDelete = nil } }),
            titleVisibility: .visible
        ) {
            Button(t("Supprimer"), role: .destructive) { if let item = selectedForDelete { viewModel.markDeleted(item); selectedForDelete = nil } }
            Button(t("Annuler"), role: .cancel) { selectedForDelete = nil }
        }
        {{#header}}
       .onChange(of: selected{{headerUpperCase}}) { acct in
            viewModel.current{{headerUpperCase}}Id = acct?.id
            viewModel.current{{headerUpperCase}} = acct
            lastUsed{{headerUpperCase}}Id = acct?.id

            viewModel.fetchEntities()

        }{{/header}}
        .onAppear {
            viewModel.fetchEntities()
            let start = startOfMonth(selectedMonth)
            let end = calendar.date(byAdding: .month, value: 1, to: start)!.addingTimeInterval(-1)
            viewModel.selectedStartDate = start
            viewModel.selectedEndDate = end
            {{#header}}
            {{headerLowerCase}}ViewModel.fetchEntities()
            if selected{{headerUpperCase}} == nil {
                if let lastId = lastUsed{{headerUpperCase}}Id,
                   let match = {{headerLowerCase}}ViewModel.entities.first(where: { $0.id == lastId }) {
                    selected{{headerUpperCase}} = match
                } else if let first = {{headerLowerCase}}ViewModel.entities.first {
                    selected{{headerUpperCase}} = first
                }
            }
            {{/header}}
        }
    }
}

     private func resetSheets() {
            selectedForDuplicate = nil
            selectedForDetails = nil
            selectedForDelete = nil
            selected = nil
        }

}

private struct IdentifiableWrapper<T>: Identifiable {
    let id = UUID()
    let value: T
    init(_ value: T) { self.value = value }
}
