import {Component, computed, EventEmitter, inject, Input, OnInit, Output, signal} from '@angular/core';
import { {{entity}}Service } from '../services/{{entityLowerCase}}.service';
import { {{entity}} } from '../models/{{entityLowerCase}}.model';
import {NgClass, NgIf, NgSwitch, NgSwitchCase, NgSwitchDefault} from '@angular/common';
import {FormBuilder, FormControl, FormGroup, FormsModule, Validators} from '@angular/forms';
import { ToastService } from '../../../shared/components/toast/toast.service';
import { AlertService } from '../../../shared/components/alert/alert.service';
import { SpinnerComponent } from '../../../shared/components/spinner/spinner.component';
import { EntityActionsComponent } from '../../../shared/components/actions/entity-actions.component';
import { SearchBoxComponent } from '../../../shared/components/search/search-box.component';
import { EntityToolbarComponent } from '../../../shared/components/toolbar/entity-toolbar.component';
import { EmptyStateComponent } from '../../../shared/components/empty/empty-state.component';
import { PaginationControlsComponent } from '../../../shared/components/pagination/pagination-controls.component';
import { PaginationJoinComponent } from '../../../shared/components/pagination/pagination-join.component';
import { GlobalDrawerComponent } from '../../../shared/components/drawer/global-drawer.component';
import {FieldDefinition, isValidUUID} from '../../../shared/components/models/field-definition';
import {GlobalDrawerFormComponent} from '../../../shared/components/drawer/app-global-drawer-form';
import {SortHeaderComponent} from '../../../shared/components/tri/sort-header.component';
import {SortService} from '../../../shared/components/tri/sort.service';
import {SHARED_IMPORTS} from '../../../shared/constantes/shared-imports';
import {getDefaultValue, toDatetimeLocalString} from '../../../shared/hooks/Parsing';
{{#fields}}
{{#isManyToOne}}
import {{openOne}} {{nameCapitalized}} } from '../../{{nameLowerCase}}/models/{{nameLowerCase}}.model';
import  {{openOne}} {{nameCapitalized}}Service } from '../../{{nameLowerCase}}/services/{{nameLowerCase}}.service';
{{/isManyToOne}}
{{/fields}}

{{#hasFiles}}
import {FileManager} from "../../fileManager/models/fileManager.model";
import {FileManagerService} from "../../fileManager/services/fileManager.service";
import {FileViewerComponent} from "../../../shared/components/files/file-viewer.component";
{{/hasFiles}}
{{#isFileManager}}
import {FileViewerComponent} from "../../../shared/components/files/file-viewer.component";
{{/isFileManager}}

import {ImporterDrawerComponent} from "../../../shared/importer-drawer/importer-drawer.component";
import {ExporterDrawerComponent} from "../../../shared/exporter-drawer/exporter-drawer.component";

import { RouterLink } from '@angular/router';

@Component({
  selector: 'app-{{entityLowerCase}}-list',
  standalone: true,
  imports: [
    SHARED_IMPORTS,
    FormsModule,
    SpinnerComponent,
    EntityActionsComponent,
    SearchBoxComponent,
    EntityToolbarComponent,
    EmptyStateComponent,
    PaginationControlsComponent,
    PaginationJoinComponent,
    NgSwitch,
    NgSwitchCase,
    NgSwitchDefault,
    GlobalDrawerFormComponent,
    GlobalDrawerComponent,
    NgIf,
    RouterLink,
    SortHeaderComponent,

    ImporterDrawerComponent,
    ExporterDrawerComponent,

  ],
  templateUrl: './{{entityLowerCase}}-list.component.html',
})
export class {{entity}}ListComponent implements OnInit {
  readonly {{entityLowerCase}}Service = inject({{entity}}Service);
  readonly alert = inject(AlertService);
  readonly sortService = inject(SortService);

  readonly list = this.{{entityLowerCase}}Service.{{entityPluralLower}};
  readonly listAll = this.{{entityLowerCase}}Service.{{entityPluralLower}}All;
  readonly totalPages = this.{{entityLowerCase}}Service.totalPages;
  readonly isLoading = signal(false);
  readonly page = signal(0);
  readonly size = signal(10);
  files: File[] = [];

  hasFiles = {{hasFiles}};

  searchField = 'name';
  searchTerm = '';

  @Output() searchFieldChange = new EventEmitter<string>();
  @Output() searchTermChange = new EventEmitter<string>();

{{#hasFiles}}
    fileManagers  =   signal<FileManager[]>([]);
    fileManagerService = inject(FileManagerService);
    {{/hasFiles}}
  {{#isFileManager}}
    fileManagers  =   signal<FileManager[]>([]);
    {{/isFileManager}}

    {{#fields}}
    {{#isManyToOne}}
    private readonly  {{nameLowerCase}}Service = inject({{nameCapitalized}}Service);
    {{name}}  =   signal<{{nameCapitalized}} | null>(null);
    {{name}}s  =   signal<{{nameCapitalized}}[]>([]);
    {{/isManyToOne}}
    {{/fields}}

  readonly selectedItem = signal<{{entity}} | null>(null);
  readonly allFields: FieldDefinition[] = [
    {{#allFields}}
    {{^isFiles}}
    { name: '{{name}}' ,
    displayName: '{{displayName}}',
    type: '{{type}}'{{#defaultValue}},
    defaultValue: '{{defaultValue}}'{{/defaultValue}} ,
    inputType: '{{inputType}}',
    entityType: '{{entityType}}',
    relation: '{{relation}}'
    },
     {{/isFiles}}
    {{/allFields}}
  ];

  readonly fieldsToDisplay: FieldDefinition[] = [
    {{#fieldsToDisplay}}
    { name: '{{name}}',
    displayName: '{{displayName}}',
    type: '{{type}}' ,
    entityType: '{{entityType}}' ,
    inputType: '{{inputType}}',
    relation: '{{relation}}'
    },
    {{/fieldsToDisplay}}
  ];

  drawerVisible = false;
  title = '';
  submitLabel = '';
  editMode = false;
  itemId?: string;

  readonly fb = inject(FormBuilder);
  form!: FormGroup;
  formKey = signal(0);
  addLink?: string;
  editLink?: string;

  buildForm(fields: FieldDefinition[], data: Record<string, any> = {}): FormGroup {
    const group: Record<string, any> = {};
    for (const field of fields) {
      const defaultValue = data[field.name] ?? getDefaultValue(field) ?? null;
      const isRequired = field.nullable === false;

      if (field.entityType === 'Date' || field.type === 'date') {
        group[field.name] = [toDatetimeLocalString(defaultValue), isRequired ? Validators.required : []];
        continue;
      }

      group[field.name] = [defaultValue, isRequired ? Validators.required : []];
    }
    return this.fb.group(group);
  }

  ngOnInit(): void {
    this.refresh();
  }

  refresh(): void {
    this.isLoading.set(true);
    this.{{entityLowerCase}}Service.fetch(this.page(), this.size()).subscribe({
      next: () => this.isLoading.set(false),
      error: err => {
        this.alert.show('Erreur lors de la récupération des {{entityPluralLower}}.', 'error');
        this.isLoading.set(false);
      }
    });
  }

  deleteById(id: string): void {
    const item = this.list().find(e => e.id === id);
    if (!item) return;

    const confirmed = window.confirm(`Supprimer "${item.id}" ?`);
    if (!confirmed) return;

    this.{{entityLowerCase}}Service.delete(id).subscribe({
      next: () => {
        this.alert.show(`Suppression de "{{entity}}" "${item.id}" en cours...`, 'success');
        setTimeout(() => this.refresh(), 1500);
      },
      error: err => {
        this.alert.show(`Erreur suppression "${item.id}"`, 'error');
      }
    });
  }

  showDetails(id: string): void {
    const item = this.list().find(e => e.id === id);
    if (!item) return;

    this.fetchDeps(item);

    this.selectedItem.set(null);
     {{#fields}}
    {{#isManyToOne}}
     if (item.{{name}}) {
        this.{{nameLowerCase}}Service.getById(item.{{name}}).subscribe({
          next: {{name}} => {
             item.{{name}}Model = {{name}};
              this.selectedItem.set({
              ...item,
              {{name}}Model: {{name}}
            });
          },
          error: err => {
            this.alert.show('Erreur lors de la récupération .', 'error');

          }
        });
    }
    {{/isManyToOne}}
    {{/fields}}

    {{^hasManyToOne}}
     setTimeout(() => this.selectedItem.set(item), 0);
    {{/hasManyToOne}}

  }

  onSearch({ field, value }: { field: string; value: string }): void {
    this.searchField = field;
    this.searchTerm = value;
    if (!value) return this.refresh();
    this.isLoading.set(true);
    this.{{entityLowerCase}}Service.search(field, value).subscribe({
      next: items => {
        this.list.set(items);
        this.isLoading.set(false);
      },
      error: err => {
        this.alert.show('Erreur lors de la recherche.', 'error');
        this.isLoading.set(false);
      }
    });
  }

  clearSearch(): void {
    this.searchTerm = '';
    this.refresh();
  }

  next(): void {
    if (this.page() < this.totalPages() - 1) {
      this.page.update(p => p + 1);
      this.refresh();
    }
  }

  prev(): void {
    if (this.page() > 0) {
      this.page.update(p => p - 1);
      this.refresh();
    }
  }

  getFieldValue(item: {{entity}}, field: string): any {
    return (item as Record<string, any>)[field];
  }

  handleSave(data: any) {
    const now = new Date().toISOString();
    {{#fields}}
    {{#isDate}}
    data.{{name}} = new Date(data.{{name}} || now).toISOString();
    {{/isDate}}
{{/fields}}

    if (this.editMode && this.itemId) {


      this.{{entityLowerCase}}Service.update(this.itemId, data).subscribe({
        next: () => {
          this.alert.show('Mis(e) à jour "{{entity}}" en cours.', 'success');
          this.closeDrawer();
          this.refresh();
        },
        error: () => {
          this.alert.show('Erreur lors de la mise à jour', 'error');
        }
      });
    } else {


      this.{{entityLowerCase}}Service.create(data).subscribe({
        next: () => {
          this.alert.show('Création "{{entity}}" en cours.  ', 'success');
          this.closeDrawer();
          this.refresh();
        },
        error: () => {
          this.alert.show('Erreur lors de la création', 'error');
        }
      });
    }
  }

  handleDelete(id: string) {
    const confirmed = window.confirm('Supprimer cet(te) {{entityLowerCase}} ?');
    if (!confirmed) return;
    this.{{entityLowerCase}}Service.delete(id).subscribe({
      next: () => {
        this.alert.show('Suppression de "{{entity}}" en cours... ', 'success');
        this.closeDrawer();
        this.refresh();
      },
      error: () => {
        this.alert.show('Erreur lors de la suppression', 'error');
      }
    });
  }

  closeDrawer() {
    this.drawerVisible = false;
    this.form.reset();
    this.itemId = undefined;
  }

  openDrawerForCreate() {
    this.drawerVisible = false;
    this.fetchDeps();
    setTimeout(() => {
      this.drawerVisible = true;
      this.formKey.update(k => k + 1);
      this.title = 'Nouveau {{entityLowerCase}}';
      this.submitLabel = 'Sauvegarder';
      this.editMode = false;
      this.itemId = undefined;
      this.form = this.buildForm(this.allFields);
      this.addLink = '/{{entityLowerCase}}/new';
    });
  }

  openDrawerForEdit(item: {{entity}}) {
    this.drawerVisible = false;
    this.fetchDeps(item);
    setTimeout(() => {
      this.drawerVisible = true;
      this.formKey.update(k => k + 1);
      this.title = 'Modifier {{entityLowerCase}}';
      this.submitLabel = 'Mettre à jour';
      this.editMode = true;
      this.itemId = item.id;
      this.form = this.buildForm(this.allFields, item);
      this.editLink = `/{{entityLowerCase}}/${item.id}/edit`;
    });
  }

  private normalizeForCompare(value: any): string {
    if (value === null || value === undefined) return '';
    if (typeof value === 'boolean') return value ? '1' : '0';
    return String(value).toLowerCase();
  }

  readonly sortedList = computed(() => {
    const { active, direction } = this.sortService.state();
    const data = this.list();
    if (!active || !direction) return data;
    return [...data].sort((a, b) => {
      const aValue = this.normalizeForCompare(this.getFieldValue(a, active));
      const bValue = this.normalizeForCompare(this.getFieldValue(b, active));
      return direction === 'asc'
        ? aValue.localeCompare(bValue)
        : bValue.localeCompare(aValue);
    });
  });

  selectedFieldType(): string {
    return this.fieldsToDisplay.find(f => f.name === this.searchField)?.type ?? 'text';
  }

    fetchDeps(item?: {{entity}}): void {

        {{#fields}}
        {{#isManyToOne}}
        this.{{nameLowerCase}}Service.fetch(0,1000).subscribe(data => this.{{name}}s.set(data.content));
        {{/isManyToOne}}
        {{/fields}}

        {{^isFileManager}}
        this.getFileManager(item);
        {{/isFileManager}}
    }

    getEntities(name: string) {
        {{#fields}}
    {{#isManyToOne}}
        if (name === '{{name}}') return this.{{name}}s();
        {{/isManyToOne}}
{{/fields}}
    return [];
    }

    getFileManager(item?: {{entity}}): void {

{{#hasFiles}}
        if(!item?.id ){
          return ;
        }
        this.fileManagerService.search('objectId', item.id).subscribe(files => {
          this.fileManagers.set(files);
        });
        {{/hasFiles}}
{{#isFileManager}}
        if(!item?.id ){
          return ;
        }
        this.fileManagerService.search('objectId', item.id).subscribe(files => {
          this.fileManagers.set(files);
        });
        {{/isFileManager}}
      }


       // Importer Drawer
    drawerImportVisible = signal(false);

    openImportDrawer() {
        this.drawerImportVisible.set(true);
    }

    closeImportDrawer() {
        this.drawerImportVisible.set(false);
    }

    handleImport(items: Partial<{{entity}}>[]): void {
        items.forEach((item) =>
            this.{{entityLowerCase}}Service.create(item).subscribe()
        );

        this.alert.show(
                        `{{entityLowerCase}} import en cours.`,
                        'success'
                    );
    }

    // Exporter Drawer
    drawerExportVisible = signal(false);

    openExportDrawer() {
        this.drawerExportVisible.set(true);
    }

    getFieldNameOnly(){
      return   this.allFields.map((field) => field.name);
    }

    exportAll(): void {
        this.isLoading.set(true);
        this.{{entityLowerCase}}Service.fetchAll().subscribe({
          next: (items) => {
            this.drawerExportVisible.set(true);
            this.{{entityLowerCase}}Service.{{entityPluralLower}}All.set(items);
          },
          error: () => {
            this.alert.show('Erreur lors de l\'exportation.', 'error');
          },
          complete: () => {
            this.isLoading.set(false);
          }
    });

  }

}
