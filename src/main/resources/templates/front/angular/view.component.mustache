import { Component, inject, signal, effect } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, Router, RouterLink } from '@angular/router';
import { {{entity}}Service } from '../services/{{entityLowerCase}}.service';
import { {{entity}} } from '../models/{{entityLowerCase}}.model';
import { FieldDefinition } from '../../../shared/components/models/field-definition';
import { EntityToolbarActionComponent } from '../../../shared/components/view-toolbar-actions/view-toolbar-actions';
import { AlertService } from '../../../shared/components/alert/alert.service';

{{#fields}}
{{#isManyToOne}}
import {{openOne}} {{nameCapitalized}} } from '../../{{name}}/models/{{name}}.model';
import  {{openOne}} {{nameCapitalized}}Service } from '../../{{name}}/services/{{name}}.service';
{{/isManyToOne}}
{{/fields}}

@Component({
  selector: 'app-{{entityLowerCase}}-view',
  standalone: true,
  imports: [CommonModule, RouterLink, EntityToolbarActionComponent],
  templateUrl: './{{entityLowerCase}}-view.component.html',
})
export class {{entity}}ViewComponent {
  private readonly route = inject(ActivatedRoute);
  private readonly service = inject({{entity}}Service);
  private readonly router = inject(Router);
  private readonly alert = inject(AlertService);

  readonly id = this.route.snapshot.paramMap.get('id');
  readonly item = signal<{{entity}} | null>(this.service.{{entityLowerCase}}s().find(e => e.id === this.id) ?? null);
  readonly isLoading = signal(false);

    {{#fields}}
    {{#isManyToOne}}
    private readonly  {{name}}Service = inject({{nameCapitalized}}Service);
    {{name}}  =   signal<{{nameCapitalized}} | null>(null);
    {{/isManyToOne}}
    {{/fields}}

  readonly fields: FieldDefinition[] = [
    {{#fields}}
    {{^isFiles}}
    {{^isId}}
        { name: '{{name}}',
        displayName: '{{displayName}}', type: '{{type}}'{{#options}}, options: {{options}}{{/options}},
        entityType: '{{entityType}}',
        relation: '{{relation}}'
        },
        {{/isId}}
    {{/isFiles}}
    {{/fields}}
  ];

  constructor() {
    effect(() => {
      if (!this.item()) {
        this.isLoading.set(true);
        this.service.getById?.(this.id!).subscribe?.({
          next: e => {
            this.item.set(e);
            this.isLoading.set(false);
          },
          error: _ => {
            this.alert.show('{{entity}} introuvable', 'error');
            this.isLoading.set(false);
          }
        });
      }
        {{#fields}}
        {{#isManyToOne}}
        if (this.item() && !this.item()!.{{name}}Model) {
            this.{{name}}Service.getById(this.item()!.{{name}}!).subscribe({
              next: {{name}} => {
                this.{{name}}.set({{name}});

                this.item.set({
                  ...this.item()!,
                  {{name}}Model: {{name}}
                })

              },
              error: _ => {
                this.alert.show('Erreur lors de la récupération {{name}}', 'error');
              }
            });
          }
        {{/isManyToOne}}
        {{/fields}}
    });
  }

   getFieldValue(item: {{entity}}, field: string): any {
    return (item as Record<string, any>)[field];
  }

  onDelete() {
    const id = this.item()?.id ?? this.id ?? null;
    if (!id) {
      this.alert.show(`{{entity}} "${this.id}" introuvable`, 'error');
      return;
    }
    const confirmed = window.confirm(`Supprimer "${id}" ?`);
    if (!confirmed) return;
    this.service.delete?.(id).subscribe?.({
      next: () => {
        this.alert.show(`{{entity}} "${id}" supprimé(e)`, 'success');
        setTimeout(() => {
          this.router.navigate(['/{{entityLowerCase}}']);
        }, 600);
      },
      error: err => {
        this.alert.show(`Erreur suppression "{{entity}} ${id}"`, 'error');
      }
    });
  }


   getRelatedModel(item: any, fieldName: string) {
     return (item as any)[fieldName + 'Model'];
  }

}
