import { inject, Injectable, signal } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { {{entity}} } from '../models/{{entityLowerCase}}.model';
import { AuthService } from '../../../shared/security/services/auth.service';
import { API_BASE } from '../../../shared/constantes/shared-imports';
import { Observable, tap } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class {{entity}}Service {
  private readonly http = inject(HttpClient);
  private readonly auth = inject(AuthService);
  private readonly base = `${API_BASE}/v1`;

  readonly {{entityPluralLower}} = signal<{{entity}}[]>([]);
  readonly totalPages = signal(0);
  readonly totalElements = signal(0);

  private headers(): HttpHeaders {
    return new HttpHeaders({
      'Content-Type': 'application/json',
    });
  }

  fetch(page = 0, limit = 10): Observable<{ content: {{entity}}[]; totalPages: number; totalElements: number }> {
    return this.http
      .get<{ content: {{entity}}[]; totalPages: number; totalElements: number }>(
        `${this.base}/queries/{{entityPluralLower}}?page=${page}&limit=${limit}`,
        { headers: this.headers() }
      )
      .pipe(
        tap(res => {
          this.{{entityPluralLower}}.set(res.content);
          this.totalPages.set(res.totalPages ?? 0);
          this.totalElements.set(res.totalElements ?? 0);
        })
      );
  }
{{^hasFiles}}
  create(dto: Partial<{{entity}}>): Observable<any> {
    return this.http.post(`${this.base}/commands/{{entityLowerCase}}`, dto, {
      headers: this.headers(),
    });
  }
{{/hasFiles}}

{{#hasFiles}}
  create(dto:   Partial<{{entity}}>): Observable<{{entity}}> {
    const form = new FormData();
    {{#fields}}
    {{#isFiles}}
    if (dto.{{name}}) {
      for (const file of dto.{{name}}) {
        form.append('{{name}}', file);
      }
    }
    {{/isFiles}}
    {{^isFiles}}
    if(dto.{{name}} != undefined && dto.{{name}} !== null && dto.{{name}}.length > 0) {
        form.append('{{name}}', dto.{{name}});
    }
    {{/isFiles}}
{{/fields}}

    return this.http.post<{{entity}}>(`${this.base}/commands/{{entityLowerCase}}`, form);
  }

{{/hasFiles}}
{{^hasFiles}}
  update(id: string, dto: Partial<{{entity}}>): Observable<any> {
    return this.http.put(`${this.base}/commands/{{entityLowerCase}}/${id}`, dto, {
      headers: this.headers(),
    });
  }
{{/hasFiles}}

{{#hasFiles}}
    update(id: string, dto: Partial<{{entity}}>): Observable<any> {

    const form = new FormData();
    {{#fields}}
    {{#isFiles}}
    if (dto.{{name}}) {
    for (const file of dto.{{name}}) {
    form.append('{{name}}', file);
    }
    }
    {{/isFiles}}
    {{^isFiles}}
    if(dto.{{name}} != undefined && dto.{{name}} !== null && dto.{{name}}.length > 0) {
    form.append('{{name}}', dto.{{name}});
    }
    {{/isFiles}}
{{/fields}}

    return this.http.put(`${this.base}/commands/{{entityLowerCase}}/${id}`, form);
  }
{{/hasFiles}}


  delete(id: string): Observable<any> {
    return this.http.delete(`${this.base}/commands/{{entityLowerCase}}/${id}`, {
      headers: this.headers(),
    });
  }

  search(field: string, value: string): Observable<{{entity}}[]> {
    const fieldType = this.getFieldType(field);
    let formattedValue = value;

    if (fieldType === 'boolean') {
      formattedValue = value.toLowerCase() === 'true' ? 'true' : 'false';
    }

    if (fieldType === 'date') {
      const date = new Date(value);
      if (!isNaN(date.getTime())) {
        formattedValue = date.toISOString().split('T')[0] + 'T00:00:00Z';
      }
    }

    return this.http
      .get<{{entity}}[]>(
        `${this.base}/queries/{{entityLowerCase}}/${field}?${field}=${encodeURIComponent(formattedValue)}`,
        { headers: this.headers() }
      )
      .pipe(tap(res => this.{{entityPluralLower}}.set(res)));
  }

  getById(id: string): Observable<{{entity}}> {
    return this.http.get<{{entity}}>(
      `${this.base}/queries/{{entityLowerCase}}/id?id=${encodeURIComponent(id)}`,
      { headers: this.headers() }
    );
  }

  private getFieldType(field: string): 'string' | 'boolean' | 'date' {
    switch (field) {
      {{#fields}}
    {{#isBoolean}}
      case '{{name}}':
        return 'boolean';
      {{/isBoolean}}
    {{#isDate}}
      case '{{name}}':
        return 'date';
      {{/isDate}}
{{/fields}}
      default:
        return 'string';
    }
  }
}
