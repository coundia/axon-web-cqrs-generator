import {Component, inject, OnInit, signal} from '@angular/core';
import {ActivatedRoute, Router, RouterLink} from '@angular/router';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, NonNullableFormBuilder, Validators } from '@angular/forms';
import { {{entity}}Service } from '../services/{{entityLowerCase}}.service';
import { {{entity}} } from '../models/{{entityLowerCase}}.model';
import {AlertService} from '../../../shared/components/alert/alert.service';
import {FieldDefinition} from '../../../shared/components/models/field-definition';

@Component({
  selector: 'app-{{entityLowerCase}}-form',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, RouterLink],
  templateUrl: './{{entityLowerCase}}-form.component.html',
})
export class {{entity}}FormComponent implements OnInit {
  private readonly fb = inject(NonNullableFormBuilder);
  private readonly service = inject({{entity}}Service);
  private readonly route = inject(ActivatedRoute);
  private readonly router = inject(Router);

  readonly id = this.route.snapshot.paramMap.get('id');
  readonly isEdit = signal(!!this.id);
  readonly isLoading = signal(false)
  readonly alert = inject(AlertService)

  readonly form = this.fb.group({
    {{#fields}}
    {{name}}: [ {{{defaultValue}}} {{^nullable}}, Validators.required{{/nullable}} ],
    {{/fields}}
  });

  readonly fields: FieldDefinition[] = [
    {{#fields}}
    { name: '{{name}}', displayName: '{{displayName}}', type: '{{type}}'{{#options}}, options: {{options}}{{/options}} },
    {{/fields}}
  ];

  ngOnInit() {
    if (this.isEdit()) {
      const existing = this.service.{{entityLowerCase}}s().find(e => e.id === this.id);
      if (existing) {
        this.form.patchValue({
          {{#fields}}
    {{name}}: existing.{{name}},
          {{/fields}}
        });
      }
    }
  }

  save() {
    if (this.form.invalid) return;

    const now = new Date().toISOString();

    const data: Partial<{{entity}}> = {
      ...this.form.getRawValue(),
      updatedAt: now
    };

    this.isLoading.set(true);

    const request = this.isEdit()
      ? this.service.update(this.id!, data)
      : this.service.create(data);

    request.subscribe({
      next: async () => {
        this.isLoading.set(false);
        this.alert.show("Operation en cours...!", 'success');
        setTimeout(() => {
          this.alert.show("Opération réussie avec succès!", 'success');
        }, 1000)
        await this.router.navigate(['/{{entityLowerCase}}']);
      },
      error: (err) => {
        this.isLoading.set(false);
        this.alert.show('An error occurred while saving the {{entityLowerCase}}. Please try again.','error');
      }
    })
  }
}
