import { Component, inject, OnInit, signal, effect } from '@angular/core';
import { ActivatedRoute, Router, RouterLink } from '@angular/router';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, NonNullableFormBuilder, Validators } from '@angular/forms';
import { {{entity}}Service } from '../services/{{entityLowerCase}}.service';
import { {{entity}} } from '../models/{{entityLowerCase}}.model';
import { AlertService } from '../../../shared/components/alert/alert.service';
import { FieldDefinition } from '../../../shared/components/models/field-definition';
import { EntityToolbarActionComponent } from '../../../shared/components/view-toolbar-actions/view-toolbar-actions';
import {toDatetimeLocalString} from '../../../shared/hooks/Parsing';

import {EntityPickerComponent} from '../../../shared/picker/app-entity-picker';


{{#fields}}
{{#isManyToOne}}
import {{openOne}} {{nameCapitalized}} } from '../../{{name}}/models/{{name}}.model';
import  {{openOne}} {{nameCapitalized}}Service } from '../../{{name}}/services/{{name}}.service';
{{/isManyToOne}}
{{/fields}}


@Component({
  selector: 'app-{{entityLowerCase}}-form',
  standalone: true,
  imports: [CommonModule,
   ReactiveFormsModule,
    EntityPickerComponent,
    EntityToolbarActionComponent
    ],
  templateUrl: './{{entityLowerCase}}-form.component.html',
})
export class {{entity}}FormComponent implements OnInit {
  private readonly fb = inject(NonNullableFormBuilder);
  private readonly service = inject({{entity}}Service);
  private readonly route = inject(ActivatedRoute);
  private readonly router = inject(Router);
  readonly alert = inject(AlertService);

  readonly id = this.route.snapshot.paramMap.get('id');
  readonly isEdit = signal(!!this.id);
  readonly isLoading = signal(false);

    {{#fields}}
    {{#isManyToOne}}
    private readonly  {{name}}Service = inject({{nameCapitalized}}Service);
    {{name}}s  =   signal<{{nameCapitalized}}[]>([]);
    {{/isManyToOne}}
    {{/fields}}

  readonly form = this.fb.group({
    id: [ ""  ],
    {{#fields}}
    {{^isId}}
    {{name}}: [ {{{defaultValue}}} {{^nullable}}, Validators.required{{/nullable}} ],
    {{/isId}}
    {{/fields}}
  });

  readonly fields: FieldDefinition[] = [
    {{#fields}}
    { name: '{{name}}',
    displayName: '{{displayName}}',
     type: '{{type}}'{{#options}}, options: {{options}}{{/options}},
      entityType: '{{entityType}}' ,
      inputType: '{{inputType}}',
      relation: '{{relation}}'
      },
    {{/fields}}
  ];

  ngOnInit() {
    if (this.isEdit()) {
      let existing = this.service.{{entityLowerCase}}s().find(e => e.id === this.id);
      if (existing) {
        this.form.patchValue({
          {{#fields}}
                 {{^isDate}}
                {{name}}: existing.{{name}},
                {{/isDate}}
                {{#isDate}}
                {{name}}: toDatetimeLocalString(existing.{{name}}) || '',
                {{/isDate}}
          {{/fields}}
        });
      } else {
        this.isLoading.set(true);
        this.service.getById?.(this.id!).subscribe?.({
          next: e => {
            if (e) {
              this.form.patchValue({
                {{#fields}}
                    {{^isDate}}
                    {{name}}: e.{{name}},
                    {{/isDate}}
                    {{#isDate}}
                    {{name}}: toDatetimeLocalString(e.{{name}}) || '',
                    {{/isDate}}
                {{/fields}}
              });
            }
            this.isLoading.set(false);
          },
          error: _ => {
            this.isLoading.set(false);
            this.alert.show('{{entity}} introuvable', 'error');
          }
        });
      }
    }

    {{#hasManyToOne}}
    this.fetchDeps();
    {{/hasManyToOne}}

  }

  save() {
    if (this.form.invalid) return;

    const now = new Date().toISOString();

    const data: Partial<{{entity}}> = {
      ...this.form.getRawValue(),
      updatedAt: now
    };

    this.isLoading.set(true);

    {{#fields}}
    {{#isDate}}
    data.{{name}} = new Date(data.{{name}} || now).toISOString();
    {{/isDate}}
    {{/fields}}

    const request = this.isEdit()
      ? this.service.update(this.id!, data)
      : this.service.create(data);

    request.subscribe({
      next: async () => {
        this.isLoading.set(false);
        this.alert.show("Operation en cours...!", 'success');
        setTimeout(() => {
          this.alert.show("Opération réussie avec succès!", 'success');
        }, 1000)
        await this.router.navigate(['/{{entityLowerCase}}']);
      },
      error: (err) => {
        this.isLoading.set(false);
        this.alert.show('An error occurred while saving the {{entityLowerCase}}. Please try again.', 'error');
      }
    });
  }

   onDelete() {
        //todo
      }

    {{#hasManyToOne}}
    fetchDeps() {
        {{#fields}}
        {{#isManyToOne}}
         this.{{name}}Service.fetch(0,1000).subscribe(data => this.{{name}}s.set(data.content));
        {{/isManyToOne}}
        {{/fields}}
    }
    {{/hasManyToOne}}

    getEntities(name: string) {
        {{#fields}}
        {{#isManyToOne}}
        if (name === '{{name}}') return this.{{name}}s();
        {{/isManyToOne}}
        {{/fields}}
    return [];
    }


}
