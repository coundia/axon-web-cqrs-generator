package {{package}};

{{#imports}}
	import {{.}};
{{/imports}}

import {{commandPackage}}.Delete{{name}}Command;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import lombok.extern.slf4j.Slf4j;
import org.axonframework.commandhandling.gateway.CommandGateway;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
{{#security}}
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
{{/security}}

{{#security}}
@PreAuthorize("@{{nameLowercase}}Gate.canDelete(authentication, #id)")
{{/security}}
@RestController
@RequestMapping("/api/v1/commands/{{nameLowercase}}")
@Tag(name = "{{name}} commands", description = "Endpoints for managing {{nameLowercase}}s")
@Slf4j
public class Delete{{name}}Controller {

private final {{name}}DeleteApplicationService applicationService;

public Delete{{name}}Controller({{name}}DeleteApplicationService applicationService) {
    this.applicationService = applicationService;
}


@DeleteMapping("/{id}")
@Operation(
summary = "Delete a {{nameLowercase}}",
description = "Deletes a {{nameLowercase}} based on the provided identifier"
)
@ApiResponses(value = {
@ApiResponse(responseCode = "200", description = "{{name}} deleted successfully"),
@ApiResponse(responseCode = "400", description = "Invalid ID supplied", content = @Content),
@ApiResponse(responseCode = "500", description = "Internal server error", content = @Content)
})
public ResponseEntity<String> delete{{name}}(
	@Parameter(description = "ID of the {{nameLowercase}} to delete", required = true)
	@PathVariable String id,
	@AuthenticationPrincipal Jwt jwt
	) {
	if (id == null || id.isEmpty()) {
	return ResponseEntity.badRequest().body("Invalid ID");
	}

	try {
	{{name}}Id idVo = {{name}}Id.create(id);

	MetaRequest metaRequest = MetaRequest.builder()
	.userId(RequestContext.getUserId(jwt)){{#isMultiTenant}}
		.tenantId(RequestContext.getTenantId(jwt)){{/isMultiTenant}}
	.build();

	applicationService.delete{{name}}(idVo, metaRequest);

	return ResponseEntity.ok("{{name}} deleted successfully");
	} catch (Exception e) {
	log.error("Error deleting {{nameLowercase}} with id {}: {}", id, e.getMessage());
	return ResponseEntity.internalServerError().body("Error deleting {{nameLowercase}}");
	}
	}
	}
