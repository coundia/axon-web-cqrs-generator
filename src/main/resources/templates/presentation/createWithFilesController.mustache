package {{package}};

{{#imports}}
import {{.}};
{{/imports}}

import {{dtoPackage}}.{{name}}Response;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/api/v1/commands/{{nameLowercase}}")
@Tag(name = "{{name}} commands", description = "Endpoints for managing {{nameLowercase}}s")
@RequiredArgsConstructor
@Slf4j
public class Add{{name}}Controller {

private final {{name}}ApplicationService {{nameLowercase}}ApplicationService;

@Operation(summary = "Create a new {{nameLowercase}}")
@ApiResponses(value = {
@ApiResponse(responseCode = "200", description = "{{name}} created",
content = @Content(mediaType = "application/json",
schema = @Schema(implementation = {{name}}Response.class))),
@ApiResponse(responseCode = "500", description = "Internal server error",
content = @Content)
})
@PostMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
public ResponseEntity<{{name}}Response> add{{name}}(
	{{#hasFiles}}
	{{#fieldFiles}}
		@RequestPart("{{nameCamelCase}}") MultipartFile {{nameCamelCase}}{{^last}},{{/last}}
	{{/fieldFiles}},
	{{/hasFiles}}
	{{#fields}}
		{{^isId}}
			@RequestParam("{{nameCamelCase}}") {{primitiveType}} {{nameCamelCase}}{{^last}},{{/last}}
		{{/isId}}
	{{/fields}}
	) {
	try {
	String responseId = {{nameLowercase}}ApplicationService.create{{name}}(
	{{#fieldFiles}}{{nameCamelCase}}{{^last}}, {{/last}}{{/fieldFiles}}
	{{#fields}}{{^isId}}, {{nameCamelCase}}{{/isId}}{{/fields}}
	);

	{{name}}Response response = new {{name}}Response(responseId
	{{#fields}}{{^isId}}, {{nameCamelCase}}{{/isId}}{{/fields}});
	return ResponseEntity.ok(response);

	} catch (Exception ex) {
	log.error("Failed to create {{nameLowercase}}: {}", ex.getMessage(), ex);
	return ResponseEntity.internalServerError().build();
	}
	}
	}
