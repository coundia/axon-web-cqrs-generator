package {{package}};

{{#imports}}
import {{.}};
{{/imports}}

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.axonframework.commandhandling.gateway.CommandGateway;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import lombok.AllArgsConstructor;
import jakarta.validation.Valid;
{{#security}}
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
{{/security}}

{{#security}}
@PreAuthorize("@{{nameLowercase}}Gate.canCreate(authentication)")
{{/security}}

@RestController
@RequestMapping("/api/v1/commands/{{nameLowercase}}")
@Tag(name = "{{name}} commands", description = "Endpoints for managing {{nameLowercase}}s")
@Slf4j

public class Add{{name}}Controller {

private final {{name}}CreateApplicationService applicationService;

public Add{{name}}Controller({{name}}CreateApplicationService applicationService) {
	this.applicationService = applicationService;
}

@PostMapping
@Operation(
summary = "Create a new {{nameLowercase}}",
description = "Creates a new {{nameLowercase}} and returns the created entity",
requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(
description = "{{name}} request payload",
required = true,
content = @Content(schema = @Schema(implementation = {{name}}Request.class))
)
)
@ApiResponses(value = {
@ApiResponse(responseCode = "200", description = "Successfully created",
content = @Content(schema = @Schema(implementation = {{name}}Response.class))),
@ApiResponse(responseCode = "500", description = "Internal server error",
content = @Content(schema = @Schema()))
})
public ResponseEntity<{{name}}Response> add{{name}}(@Valid @RequestBody {{name}}Request request,
	@AuthenticationPrincipal Jwt jwt) {
	try {

	{{name}}Response response =  applicationService.create{{name}}(
	request,
	RequestContext.getUserId(jwt) {{#isMultiTenant}},
	RequestContext.getTenantId(jwt) {{/isMultiTenant}}
	);

	return ResponseEntity.ok(response);
	} catch (Exception ex) {
	log.error("Failed to create {{nameLowercase}}: {}", ex.getMessage());
	return ResponseEntity.status(500).build();
	}
}
}
