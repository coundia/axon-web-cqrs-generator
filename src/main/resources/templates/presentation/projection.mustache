package {{package}};

{{#imports}}
	import {{.}};
{{/imports}}

import org.axonframework.eventhandling.AllowReplay;
import org.axonframework.eventhandling.EventHandler;
import org.axonframework.config.ProcessingGroup;
import org.springframework.stereotype.Component;
import lombok.extern.slf4j.Slf4j;

@AllowReplay(value = false)
@Slf4j
@Component
@ProcessingGroup("{{name}}")
public class {{name}}Projection {

private final {{name}}Repository repository;

public {{name}}Projection({{name}}Repository repository) {
this.repository = repository;
}

@EventHandler
public void on({{name}}CreatedEvent event) {
try {
{{name}} entity = {{name}}.builder()
{{#editableFields}}
	{{^isOneToMany}} {{^isManyToOne}}
		.{{nameLowerCase}}(event.get{{nameCapitalized}}().value())
	{{/isManyToOne}} {{/isOneToMany}}
	{{#isManyToOne}}
		.{{nameLowerCase}}(new {{realType}}(event.get{{nameCapitalized}}().value()))
	{{/isManyToOne}}
{{/editableFields}}
.build();

if(event.getCreatedBy() !=null){
	entity.setCreatedBy( new User(event.getCreatedBy().value()));
}

repository.save(entity);
log.info("{{name}} inserted: {}", entity);
} catch (Exception e) {
log.error("Error saving {{name}}: {}", e.getMessage(), e);
throw e;
}
}

@EventHandler
public void on({{name}}UpdatedEvent event) {
try {
{{name}} entity = repository.findById(event.getId().value())
.orElseThrow(() -> new RuntimeException("{{name}} not found"));

{{#editableFields}}
	{{#isManyToOne}}
		entity.set{{nameCapitalized}}(new {{realType}}(event.get{{nameCapitalized}}().value()));
	{{/isManyToOne}}
	{{^isManyToOne}}
		entity.set{{nameCapitalized}}(event.get{{nameCapitalized}}().value());
	{{/isManyToOne}}
{{/editableFields}}

if(event.getCreatedBy() !=null){
	entity.setCreatedBy( new User(event.getCreatedBy().value()));
}


repository.save(entity);
log.info("{{name}} updated successfully: {}", event.getId().value());
} catch (Exception e) {
log.error("Error updating {{name}}: {}", e.getMessage(), e);
throw e;
}
}

@EventHandler
public void on({{name}}DeletedEvent event) {
try {
repository.deleteById(event.getId().value());
log.info("{{name}} deleted successfully: {}", event.getId().value());
} catch (Exception e) {
log.error("Error deleting {{name}}: {}", e.getMessage(), e);
throw e;
}
}
}
