package {{package}};

{{#imports}}
	import {{.}};
{{/imports}}

import {{queryPackage}}.FindBy{{field.nameCapitalized}}{{name}}Query;
import {{dtoPackage}}.{{name}}Response;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.extern.slf4j.Slf4j;
import org.axonframework.queryhandling.QueryGateway;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import static org.axonframework.messaging.responsetypes.ResponseTypes.instanceOf;
import static org.axonframework.messaging.responsetypes.ResponseTypes.multipleInstancesOf;
import java.util.List;
import java.util.concurrent.CompletableFuture;

@RestController
@RequestMapping("/api/v1/queries/{{nameLowercase}}")
@Tag(name = "{{name}} Queries", description = "Endpoints for querying {{nameLowercase}}s by {{field.name}}")
@Slf4j
public class {{className}} {

private final QueryGateway queryGateway;

public {{className}}(QueryGateway queryGateway) {
this.queryGateway = queryGateway;
}

@GetMapping("/by-{{field.name}}")
@Operation(
summary = "Find {{nameLowercase}} by {{field.name}}",
description = "Returns a list of {{nameLowercase}}s that match the given {{field.name}}"
)
@ApiResponses(value = {
@ApiResponse(responseCode = "200", description = "List of matching {{nameLowercase}}s",
content = @Content(mediaType = "application/json", schema = @Schema(implementation = {{name}}Response.class))),
@ApiResponse(responseCode = "400", description = "Invalid parameter", content = @Content),
@ApiResponse(responseCode = "500", description = "Internal server error", content = @Content)
})
{{^isId}}
public ResponseEntity<List<{{name}}Response>> findBy{{field.nameCapitalized}}(
	@Parameter(description = "Value of the {{field.name}} to filter by", required = true)
	@RequestParam String {{field.name}}
	) {
	try {
	{{name}}{{field.nameCapitalized}} value = {{name}}Id.create({{field.name}});
	FindBy{{field.nameCapitalized}}{{name}}Query query = new FindBy{{field.nameCapitalized}}{{name}}Query(value);
	CompletableFuture<List<{{name}}Response>> future = queryGateway.query(query, multipleInstancesOf({{name}}Response.class));
		List<{{name}}Response> response = future.join();
			return ResponseEntity.ok(response);
			} catch (Exception e) {
			log.error("Failed to find {{nameLowercase}} by {{field.name}}: {}", e.getMessage());
			return ResponseEntity.internalServerError().build();
		}
	}
{{/isId}}
{{#isId}}
public ResponseEntity<{{name}}Response> findBy{{field.nameCapitalized}}(
@Parameter(description = "Value of the {{field.name}} to filter by", required = true)
@RequestParam String {{field.name}}
) {
try {
	{{name}}{{field.nameCapitalized}} value = {{name}}Id.create({{field.name}});
	FindBy{{field.nameCapitalized}}{{name}}Query query = new FindBy{{field.nameCapitalized}}{{name}}Query(value);
	CompletableFuture<{{name}}Response> future = queryGateway.query(query, instanceOf({{name}}Response.class));
	{{name}}Response response = future.join();
	return ResponseEntity.ok(response);
	} catch (Exception e) {
	log.error("Failed to find {{nameLowercase}} by {{field.name}}: {}", e.getMessage());
	return ResponseEntity.internalServerError().build();
}
}
{{/isId}}
}
