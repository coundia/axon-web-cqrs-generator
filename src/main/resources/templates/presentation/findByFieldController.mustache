package {{package}};

{{#imports}}
import {{.}};
{{/imports}}

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.axonframework.queryhandling.QueryGateway;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.concurrent.CompletableFuture;

import static org.axonframework.messaging.responsetypes.ResponseTypes.instanceOf;
import static org.axonframework.messaging.responsetypes.ResponseTypes.multipleInstancesOf;
{{#security}}
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
{{/security}}

{{#security}}
@PreAuthorize("@{{nameLowercase}}Gate.canRead(authentication, #id)")
{{/security}}
@RestController
@RequestMapping("/api/v1{{apiPrefix}}/queries/{{nameLowercase}}")
@Tag(name = "{{name}} Queries", description = "Endpoints for querying {{nameLowercase}}s by {{field.name}}")
@Slf4j
public class {{className}} {

private final {{name}}ReadApplicationService applicationService;

public {{className}}({{name}}ReadApplicationService  applicationService) {
	this.applicationService = applicationService;
}

@GetMapping("/{{field.name}}")
@Operation(
summary = "Find {{nameLowercase}} by {{field.name}}",
description = "Returns {{#isId}}a single{{/isId}}{{^isId}}a list of{{/isId}} {{nameLowercase}}s that match the given {{field.name}}"
)
@ApiResponses(value = {
@ApiResponse(responseCode = "200", description = "Query successful",
content = @Content(mediaType = "application/json", schema = @Schema(implementation = {{name}}Response.class))),
@ApiResponse(responseCode = "400", description = "Invalid parameter", content = @Content),
@ApiResponse(responseCode = "500", description = "Internal server error", content = @Content)
})

public ResponseEntity<{{#isId}}{{name}}Response{{/isId}}{{^isId}}List<{{name}}Response>{{/isId}}> findBy{{field.nameCapitalized}}(
	@AuthenticationPrincipal Jwt jwt,
	@Parameter(description = "Value of the {{field.name}} to filter by", required = true)
	@RequestParam {{field.primitiveType}} {{field.name}}
	) {
	try {

	MetaRequest metaRequest = MetaRequest.builder()
		.userId(RequestContext.getUserId(jwt)){{#isMultiTenant}}
		.tenantId(RequestContext.getTenantId(jwt)){{/isMultiTenant}}
	.build();

	var future = applicationService.findBy{{name}}{{field.nameCapitalized}}({{name}}{{field.nameCapitalized}}
	.create({{field.name}}) , metaRequest);

	return ResponseEntity.ok(future);
	} catch (Exception e) {
	log.error("Failed to find {{nameLowercase}} by {{field.name}}: {}", e.getMessage(), e);
	return ResponseEntity.internalServerError().build();
	}
	}
}