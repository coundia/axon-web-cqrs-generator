package {{package}};

{{#imports}}
	import {{.}};
{{/imports}}

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

import org.axonframework.queryhandling.QueryGateway;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.concurrent.CompletableFuture;

@RestController
@RequestMapping("/api/v1/queries/list-{{nameLower}}")
@Tag(name = "{{name}} Queries", description = "Endpoints for listing paginated {{nameLower}}s")
public class {{name}}ListController {

private final QueryGateway queryGateway;

public {{name}}ListController(QueryGateway queryGateway) {
this.queryGateway = queryGateway;
}

@GetMapping
@Operation(
summary = "List paginated {{nameLower}}s",
description = "Returns a paginated list of {{nameLower}}s based on page and limit parameters"
)
@ApiResponses(value = {
@ApiResponse(
responseCode = "200",
description = "Successfully retrieved list of {{nameLower}}s",
content = @Content(mediaType = "application/json", schema = @Schema(implementation = {{name}}PagedResponse.class))
),
@ApiResponse(
responseCode = "500",
description = "Internal server error",
content = @Content
)
})
public {{name}}PagedResponse list(
@Parameter(description = "Page number (zero-based index)", example = "0")
@RequestParam(defaultValue = "0") int page,

@Parameter(description = "Number of items per page", example = "10")
@RequestParam(defaultValue = "10") int limit
) {
List{{name}}Query query = new List{{name}}Query(page, limit);
CompletableFuture<{{name}}PagedResponse> future = queryGateway.query(query, {{name}}PagedResponse.class);
	return future.join();
	}
}
