package {{package}};

{{#imports}}
	import {{.}};
{{/imports}}

public class {{nameAggregate}}Mapper {

public static {{nameAggregate}}Response toResponse({{entity}} entity) {
return {{nameAggregate}}Response.builder()
{{#editableFields}}
	{{#isManyToOne}}
		.{{nameUnCapitalized}}(entity.get{{nameCapitalized}}() != null ? entity.get{{nameCapitalized}}().getId() : null)
	{{/isManyToOne}}
	{{^isManyToOne}}
		.{{nameUnCapitalized}}(entity.get{{nameCapitalized}}())
	{{/isManyToOne}}
{{/editableFields}}
.build();
}

public static {{nameAggregate}}Response toResponse(Create{{nameAggregate}}Command command) {
return {{nameAggregate}}Response.builder()
{{#editableFields}}
	.{{nameUnCapitalized}}(command.get{{nameCapitalized}}().value())
{{/editableFields}}
.build();
}

public static {{nameAggregate}}Response toResponse(Update{{nameAggregate}}Command command) {
return {{nameAggregate}}Response.builder()
{{#editableFields}}
	.{{nameUnCapitalized}}(command.get{{nameCapitalized}}().value())
{{/editableFields}}
.build();
}

public static Create{{nameAggregate}}Command toCommand(
{{nameAggregate}}Request request{{#hasFiles}}, {{#fieldFiles}}{{type}} {{nameUnCapitalized}}{{^last}}, {{/last}}{{/fieldFiles}}{{/hasFiles}}
) {
return Create{{nameAggregate}}Command.builder()
{{#editableFields}}{{^isId}}
	.{{nameUnCapitalized}}({{nameAggregate}}{{nameCapitalized}}.create(request.get{{nameCapitalized}}()))
{{/isId}}{{/editableFields}}{{#hasFiles}}
	{{#fieldFiles}}
		.{{nameUnCapitalized}}({{nameUnCapitalized}})
	{{/fieldFiles}}{{/hasFiles}}
.build();
}

{{^hasFiles}}
	public static Update{{nameAggregate}}Command toUpdateCommand({{nameAggregate}}Id id, {{nameAggregate}}Request request) {
	return Update{{nameAggregate}}Command.builder()
	.id(id)
	{{#editableFields}}{{^isId}}
		.{{nameUnCapitalized}}({{nameAggregate}}{{nameCapitalized}}.create(request.get{{nameCapitalized}}()))
	{{/isId}}{{/editableFields}}
	.build();
	}
{{/hasFiles}}

{{#hasFiles}}
	public static Update{{nameAggregate}}Command toUpdateCommand(
	{{nameAggregate}}Id id,
	{{nameAggregate}}Request request,
	{{#editableFields}}{{nameAggregate}}{{nameCapitalized}} {{nameUnCapitalized}}{{^last}}, {{/last}}{{/editableFields}}
	) {
	return Update{{nameAggregate}}Command.builder()
	.id(id)
	{{#editableFields}}{{^isId}}
		.{{nameUnCapitalized}}({{nameAggregate}}{{nameCapitalized}}.create(request.get{{nameCapitalized}}()))
	{{/isId}}{{/editableFields}}
	{{#editableFields}}
		.{{nameUnCapitalized}}({{nameUnCapitalized}})
	{{/editableFields}}
	.build();
	}
{{/hasFiles}}

public static Delete{{nameAggregate}}Command toDeleteCommand({{nameAggregate}}Id id) {
return Delete{{nameAggregate}}Command.builder()
.id(id)
.build();
}
}
