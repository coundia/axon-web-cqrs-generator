package {{package}};

{{#imports}}
import {{.}};
{{/imports}}

import org.axonframework.commandhandling.gateway.CommandGateway;
import org.springframework.stereotype.Service;
{{#hasFiles}}
import org.springframework.web.multipart.MultipartFile;
{{/hasFiles}}
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class {{className}} {
{{#hasFiles}}
private final FileStorageService fileStorageService;
{{/hasFiles}}
private final CommandGateway commandGateway;

{{#hasFiles}}
public {{name}}Response create{{name}}(
{{#hasFiles}}{{#fieldFiles}}MultipartFile {{nameCamelCase}},{{/fieldFiles}}{{/hasFiles}}
{{#fields}}
	{{^isId}}
		{{primitiveType}} {{nameCamelCase}}{{^last}},{{/last}}
	{{/isId}}
{{/fields}}
) {
{{#fieldFiles}}
	{{entity}}{{nameCapitalized}} {{nameCamelCase}}Reference = {{entity}}{{nameCapitalized}}.create(fileStorageService.storeFile({{nameCamelCase}}));
{{/fieldFiles}}

{{name}}Request request = new {{name}}Request(
{{#fields}}
	{{^isId}}{{nameCamelCase}}{{^last}},{{/last}}{{/isId}}
{{/fields}}
);

Create{{name}}Command command = {{name}}Mapper.toCommand(
request{{#hasFiles}},
{{#fieldFiles}}{{nameCamelCase}}Reference{{^last}}, {{/last}}{{/fieldFiles}}{{/hasFiles}}
);

commandGateway.sendAndWait(command);

return {{name}}Mapper.toResponse(command);
}

{{/hasFiles}}
{{^hasFiles}}
public {{name}}Response create{{name}}({{name}}Request request){

Create{{name}}Command command = {{name}}Mapper.toCommand(
request
);
commandGateway.sendAndWait(command);
return {{name}}Mapper.toResponse(command);
}
{{/hasFiles}}


}
