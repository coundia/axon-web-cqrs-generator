package {{package}};

{{#imports}}
import {{.}};
{{/imports}}
import java.util.List;
import org.axonframework.commandhandling.gateway.CommandGateway;
import org.springframework.stereotype.Service;
{{#hasFiles}}
import org.springframework.web.multipart.MultipartFile;
{{/hasFiles}}
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class {{className}} {
{{#hasFiles}}
private final FileStorageService fileStorageService;
{{/hasFiles}}
private final CommandGateway commandGateway;

{{#hasFiles}}
public {{name}}Response create{{name}}(
{{#hasFiles}}{{#fieldFiles}}List<MultipartFile> {{nameUnCapitalized}},{{/fieldFiles}}{{/hasFiles}}
{{#editableFields}}
{{^isId}}
		{{primitiveType}} {{nameUnCapitalized}}{{^last}},{{/last}}
        {{/isId}}
{{/editableFields}},
MetaRequest metaRequest
) {

    {{name}}Request request = new {{name}}Request(
        {{#editableFields}}
        {{^isId}}
        {{nameUnCapitalized}}{{^last}},{{/last}}
        {{/isId}}
        {{/editableFields}}
    );

Create{{name}}Command command = {{name}}Mapper.toCommand(
request
);

command.setCreatedBy({{name}}CreatedBy.create(metaRequest.getUserId()));
command.setTenant({{name}}Tenant.create(metaRequest.getTenantId()));

commandGateway.sendAndWait(command);
{{#hasFiles}}
metaRequest.setObjectId(command.getId().value());
metaRequest.setObjectName("{{entityLowerCase}}");
{{#fieldFiles}}
{{entity}}{{nameCapitalized}}.create(
    fileStorageService.storeFile({{nameUnCapitalized}}, metaRequest)
    );
{{/fieldFiles}}
{{/hasFiles}}
return {{name}}Mapper.toResponse(command);
}

{{/hasFiles}}
{{^hasFiles}}
public {{name}}Response create{{name}}({{name}}Request request,
MetaRequest metaRequest
){

Create{{name}}Command command = {{name}}Mapper.toCommand(
request
);

command.setCreatedBy({{name}}CreatedBy.create(metaRequest.getUserId()));
command.setTenant({{name}}Tenant.create(metaRequest.getTenantId()));

commandGateway.sendAndWait(command);
return {{name}}Mapper.toResponse(command);
}
{{/hasFiles}}


}
