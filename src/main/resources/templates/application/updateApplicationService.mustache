package {{package}};

{{#imports}}
import {{.}};
{{/imports}}

import org.axonframework.commandhandling.gateway.CommandGateway;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class {{className}} {

private final FileStorageService fileStorageService;
private final CommandGateway commandGateway;

{{#hasFiles}}
public {{name}}Response update{{name}}(
{{name}}Id id, {{#hasFiles}}
{{#fieldFiles}}MultipartFile {{nameCamelCase}}, {{/fieldFiles}}{{/hasFiles}}
{{#fields}}
	{{^isId}}
		{{primitiveType}} {{nameCamelCase}}{{^last}},{{/last}}
	{{/isId}}
{{/fields}}
) {
{{#fieldFiles}}
	{{entity}}{{nameCapitalized}} {{nameCamelCase}}Reference = {{entity}}{{nameCapitalized}}.create(fileStorageService.storeFile({{nameCamelCase}}));
{{/fieldFiles}}

{{name}}Request request = new {{name}}Request(
{{#fields}}
	{{^isId}}{{nameCamelCase}}{{^last}},{{/last}}{{/isId}}
{{/fields}}
);

Update{{name}}Command command = {{name}}Mapper.toUpdateCommand(
id,
request{{#hasFiles}},
{{#fieldFiles}}{{nameCamelCase}}Reference{{^last}}, {{/last}}{{/fieldFiles}}{{/hasFiles}}
);

commandGateway.sendAndWait(command);

return {{name}}Mapper.toResponse(command);
}
{{/hasFiles}}

{{^hasFiles}}
public {{name}}Response update{{name}}({{name}}Id id,{{name}}Request request){

Update{{name}}Command command = {{name}}Mapper.toUpdateCommand(
id,
request
);

commandGateway.sendAndWait(command);

return {{name}}Mapper.toResponse(command);
}
{{/hasFiles}}

}
