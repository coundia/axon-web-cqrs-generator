package {{package}};

{{#imports}}
import {{.}};
{{/imports}}
import java.util.List;
import org.axonframework.commandhandling.gateway.CommandGateway;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class {{className}} {

private final FileStorageService fileStorageService;
private final CommandGateway commandGateway;

{{#hasFiles}}
public {{name}}Response update{{name}}(
{{name}}Id id, {{#hasFiles}}
    {{#fieldFiles}}List<MultipartFile> {{nameUnCapitalized}}MultipartFile, {{/fieldFiles}}{{/hasFiles}}
{{#editableFields}}
    {{^isId}}
        {{^isFiles}}
            {{primitiveType}} {{nameUnCapitalized}}{{^last}},{{/last}}
        {{/isFiles}}
    {{/isId}}
{{/editableFields}},
MetaRequest metaRequest
) {

{{^hasFiles}}
    {{name}}Request request = new {{name}}Request(
{{#editableFields}}
        {{^isId}}
            {{^isFiles}}
                {{^isId}}{{nameUnCapitalized}}{{^last}},{{/last}}{{/isId}}
            {{/isFiles}}
        {{/isId}}
    {{/editableFields}}
);
{{/hasFiles}}
Update{{name}}Command command = {{name}}Mapper.toUpdateCommand(
    id{{#hasFiles}},
    {{#editableFields}}{{^isId}}   new {{nameAggregate}}{{nameCapitalized}}({{nameUnCapitalized}}){{^last}},
    {{/last}} {{/isId}} {{/editableFields}}{{/hasFiles}}
);

    command.setCreatedBy({{name}}CreatedBy.create(metaRequest.getUserId()));
    command.setTenant({{name}}Tenant.create(metaRequest.getTenantId()));

    commandGateway.sendAndWait(command);

    {{#fieldFiles}}
    metaRequest.setObjectId(command.getId().value());
    metaRequest.setObjectName("{{entityLowerCase}}");
    fileStorageService.storeFile({{nameUnCapitalized}}MultipartFile, metaRequest);
    {{/fieldFiles}}

    return {{name}}Mapper.toResponse(command);
}
{{/hasFiles}}

{{^hasFiles}}
public {{name}}Response update{{name}}({{name}}Id id,{{name}}Request request,
MetaRequest metaRequest
){

Update{{name}}Command command = {{name}}Mapper.toUpdateCommand(
id,
request
);

command.setCreatedBy({{name}}CreatedBy.create(metaRequest.getUserId()));
command.setTenant({{name}}Tenant.create(metaRequest.getTenantId()));

commandGateway.sendAndWait(command);

return {{name}}Mapper.toResponse(command);
}
{{/hasFiles}}

}
