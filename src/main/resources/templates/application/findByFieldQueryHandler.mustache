package {{package}};

{{#imports}}
import {{.}};
{{/imports}}
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import java.util.List;
import org.axonframework.queryhandling.QueryHandler;
import lombok.extern.slf4j.Slf4j;
    {{#transactional}}
import com.groupe2cs.bizyhub.accounts.infrastructure.repository.AccountUserRepository;
{{/transactional}}


@Component
@RequiredArgsConstructor
public class FindBy{{name}}{{field.nameCapitalized}}Handler {

private final {{name}}Repository repository;

    {{#transactional}}
private final AccountUserRepository accountUserRepository;
    {{/transactional}}
@Slf4j
@QueryHandler
{{^isUnique}}
public List<{{name}}Response> handle(FindBy{{name}}{{field.nameCapitalized}}Query query) {

	 MetaRequest metaRequest = query.getMetaRequest();
	 List<{{entity}}> entities = null;
	 {{field.primitiveType}} value = query.get{{field.nameCapitalized}}().value();

	 if(metaRequest.isAdmin()) {
	    entities = repository.findBy{{field.nameJpa}}AndTenantId(value, metaRequest.getTenantId());
	 }else{
	    {{^shared}}
	    entities = repository.findBy{{field.nameJpa}}AndCreatedById(value, metaRequest.getUserId());
        {{/shared}}
	    {{#shared}}
	     entities = repository.findByAccountOwnedOrShared(value, metaRequest.getUserId());
        {{/shared}}

	 }

 	return entities.stream()
	.map({{name}}Mapper::toResponse)
	.toList();
	}
{{/isUnique}}

{{#isUnique}}
 public {{name}}Response handle(FindBy{{name}}{{field.nameCapitalized}}Query query) {

    MetaRequest metaRequest = query.getMetaRequest();
    {{entity}} entity = null;

	{{field.primitiveType}} value = query.get{{field.nameCapitalized}}().value();

	if(metaRequest.isAdmin()) {
	    entity = repository.findBy{{field.nameJpa}}AndTenantId(value, metaRequest.getTenantId())
	    .stream()
        .findFirst()
	    .orElse(null);
	 }else{
	    entity = repository.findBy{{field.nameJpa}}AndCreatedById(value, metaRequest.getUserId())
	    .stream()
        .findFirst()
	    .orElse(null);
	 }

    if (entity == null) {
        return null;
    }
		return {{name}}Mapper.toResponse(entity);
	}
{{/isUnique}}

}
