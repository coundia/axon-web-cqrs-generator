package {{package}};
{{#imports}}
import {{.}};
{{/imports}}

import org.axonframework.commandhandling.gateway.CommandGateway;
import org.springframework.stereotype.Service;
import lombok.RequiredArgsConstructor;
import java.time.Instant;


@Service
@RequiredArgsConstructor
public class {{className}} {

	private final CommandGateway commandGateway;
	{{#bind}}
	private final UserRepository userRepository ;
  {{/bind}}
	public void sync{{name}}({{name}}SyncRequest request,
MetaRequest metaRequest

) {
		for (var d : request.getDeltas()) {
			switch (d.getType()) {
				case "CREATE" -> {

Create{{name}}Command command = Create{{name}}Command.builder()
{{#editableFields}}
	{{^isId}}
		.{{name}}({{entity}}{{nameCapitalized}}.create(d.get{{nameCapitalized}}()))
	{{/isId}}
{{/editableFields}}
.build();
{{#bind}}
        String userName = d.getUsername();
        if(userName != null){
            userName = userName.toLowerCase();
            String userId = userRepository.findByUsernameAndTenantId(userName,metaRequest.getTenantId()).orElseThrow().getId();
            command.setUser({{name}}User.create(userId));
        }

    {{/bind}}
		{{#isMultiTenant}}
		if(metaRequest.getTenantId() != null) {
			command.setTenant({{name}}Tenant.create(metaRequest.getTenantId()));
		}
		{{/isMultiTenant}}
		if(metaRequest.getUserId() != null) {
			command.setCreatedBy( {{name}}CreatedBy.create(metaRequest.getUserId()));
		}

		commandGateway.sendAndWait(
							command
				);

		}
				case "UPDATE" -> {
		Update{{name}}Command update = Update{{name}}Command.builder()
		{{#editableFields}}
			.{{name}}({{entity}}{{nameCapitalized}}.create(d.get{{nameCapitalized}}()))
		{{/editableFields}}
		.build();
		{{#bind}}
	   String userName = d.getUsername();
        if(userName != null){
            userName = userName.toLowerCase();
            String userId = userRepository.findByUsernameAndTenantId(userName,metaRequest.getTenantId()).orElseThrow().getId();
            update.setUser({{name}}User.create(userId));
        }
    {{/bind}}

		if(metaRequest.getTenantId() != null) {
			//update.setTenant({{name}}Tenant.create(metaRequest.getTenantId()));
		}
		if(metaRequest.getUserId() != null) {
			//update.setCreatedBy( {{name}}CreatedBy.create(metaRequest.getUserId()));
		}

		commandGateway.sendAndWait(
		update
				);

		}
		case "DELETE" -> {
				Delete{{entity}}Command delete = Delete{{entity}}Command.builder()
					.id({{entity}}Id.create(d.getId()) )
					.build();

				if(metaRequest.getTenantId() != null) {
					//delete.setTenant({{name}}Tenant.create(metaRequest.getTenantId()));
				}

				if(metaRequest.getUserId() != null) {
					//delete.setCreatedBy( {{name}}CreatedBy.create(metaRequest.getUserId()));
				}
				commandGateway.sendAndWait(
				delete
				 );
				}
			}
		}
	}
}
