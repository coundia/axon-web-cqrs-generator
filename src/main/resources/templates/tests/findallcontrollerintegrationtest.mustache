package {{package}};

{{#imports}}
import {{.}};
{{/imports}}

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.Rollback;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.axonframework.commandhandling.gateway.CommandGateway;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static org.assertj.core.api.Assertions.assertThat;


class {{name}}FindAllControllerIntegrationTest extends BaseIntegrationTests {

@Autowired
private CommandGateway commandGateway;

@Autowired
private {{name}}Repository {{entityUnCapitalized}}Repository;

{{#fields}}
{{#hasRepository}}
@Autowired
private {{repository}} ;
{{/hasRepository}}
{{/fields}}

@Test
void it_should_return_only_user_{{entityUnCapitalized}}s_for_normal_user() throws Exception {

List<Create{{name}}Command> userCommands =
{{name}}Fixtures.randomManyViaCommand(
commandGateway,{{entityUnCapitalized}}Repository,
 {{#fields}}
{{#hasRepository}}
{{nameUnCapitalized}}DataRepository,
{{/hasRepository}}
{{/fields}}
 3, login("user", "user"));
userCommands.forEach(cmd ->
{{name}}Fixtures.byIdWaitExist({{entityUnCapitalized}}Repository, cmd.getId().value())
);

login("user", "user");
ResponseEntity<{{name}}PagedResponse> response = this.getForEntity(
"/v1{{apiPrefix}}/queries/{{entityUnCapitalized}}s?page=0&limit=1000000",
{{name}}PagedResponse.class
);
{{#isAdmin}}
assertThat(response.getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN);
{{/isAdmin}}

{{^isAdmin}}
assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
List<{{name}}Response> content = response.getBody().getContent();
assertThat(content).isNotEmpty();

List<String> expectedIds = userCommands.stream()
.map(cmd -> cmd.getId().value())
.collect(Collectors.toList());

List<String> actualIds = content.stream()
.map({{name}}Response::getId)
.collect(Collectors.toList());

assertThat(actualIds).containsAll(expectedIds);
{{/isAdmin}}
}

@Test
void it_should_return_all_{{entityUnCapitalized}}s_for_admin() throws Exception {

    List<Create{{name}}Command> userCommands =
    {{name}}Fixtures.randomManyViaCommand(
        commandGateway,
        {{entityUnCapitalized}}Repository,
        {{#fields}}
            {{#hasRepository}}
         {{nameUnCapitalized}}DataRepository,
        {{/hasRepository}}
        {{/fields}}
         5, login("user", "user")
      );
    userCommands.forEach(cmd ->
    {{name}}Fixtures.byIdWaitExist({{entityUnCapitalized}}Repository, cmd.getId().value())
    );


List<Create{{name}}Command> adminCommands =
{{name}}Fixtures.randomManyViaCommand(
commandGateway,{{entityUnCapitalized}}Repository,
{{#fields}}
    {{#hasRepository}}
        {{nameUnCapitalized}}DataRepository,
        {{/hasRepository}}
{{/fields}}
 5, login("admin", "admin"));
adminCommands.forEach(cmd ->
{{name}}Fixtures.byIdWaitExist({{entityUnCapitalized}}Repository, cmd.getId().value())
);

login("admin", "admin");
ResponseEntity<{{name}}PagedResponse> response = this.getForEntity(
"/v1{{apiPrefix}}/queries/{{entityUnCapitalized}}s?page=0&limit=1000000",
{{name}}PagedResponse.class
);
assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
List<{{name}}Response> content = response.getBody().getContent();
assertThat(content).isNotEmpty();

List<String> expectedIds = userCommands.stream()
.map(cmd -> cmd.getId().value())
.collect(Collectors.toList());

List<String> actualIds = content.stream()
.map({{name}}Response::getId)
.collect(Collectors.toList());

assertThat(actualIds).containsAll(expectedIds);

}
}
