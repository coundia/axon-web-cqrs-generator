package {{package}};

{{#imports}}
import {{.}};
{{/imports}}
import org.junit.jupiter.api.Test;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import static org.assertj.core.api.Assertions.assertThat;
import java.util.List;
import java.util.UUID;
import org.axonframework.commandhandling.gateway.CommandGateway;
import org.springframework.beans.factory.annotation.Autowired;

public class {{className}} extends BaseIntegrationTests {

	@Autowired
	private CommandGateway commandGateway;

	@Autowired
private {{name}}Repository {{nameLower}}Repository;

	{{#fields}}
    {{#hasRepository}}
    @Autowired
    private {{repository}} ;
    {{/hasRepository}}
    {{/fields}}

	@Test
	void it_should_initiate_sync_of_{{nameLowercase}}s() {
		{{name}}SyncRequest requestDTO = {{name}}SyncRequest.builder()
		.deltas(List.of(
		{{name}}DeltaDto.builder()
		{{#editableFields}}
			{{^isId}}.{{nameUnCapitalized}}({{{testValue}}})
			{{/isId}}
		{{/editableFields}}
		.type("CREATE")
		.build()
		))
		.build();

	String uri = "/api/v1{{apiPrefix}}/commands/{{nameLowercase}}/sync";
	HttpEntity<{{name}}SyncRequest> request = new HttpEntity<>(requestDTO, headers);
		ResponseEntity<ApiResponseDto> response = testRestTemplate.postForEntity(uri, request, ApiResponseDto.class);

			assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
			assertThat(response.getBody()).isNotNull();
			assertThat(response.getBody().getCode()).isEqualTo(1);
			assertThat(response.getBody().getMessage()).isEqualTo("Sync in progress");
			}

			@Test
			void it_should_initiate_update_of_{{nameLowercase}}s() {

			String existingId = {{name}}Fixtures.randomOneViaCommand(commandGateway,{{nameLower}}Repository, getCurrentUser()).getId().value();

			{{name}}SyncRequest requestDTO = {{name}}SyncRequest.builder()
			.deltas(List.of(
			{{name}}DeltaDto.builder()
			.id(existingId)
			{{#editableFields}}
				{{^isId}}.{{nameUnCapitalized}}({{{testValue}}})
				{{/isId}}
			{{/editableFields}}
			.type("UPDATE")
			.build()
			))
			.build();

			String uri = "/api/v1{{apiPrefix}}/commands/{{nameLowercase}}/sync";
			HttpEntity<{{name}}SyncRequest> request = new HttpEntity<>(requestDTO, headers);
				ResponseEntity<ApiResponseDto> response = testRestTemplate.postForEntity(uri, request, ApiResponseDto.class);

					assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
					assertThat(response.getBody().getCode()).isEqualTo(1);
					assertThat(response.getBody().getMessage()).isEqualTo("Sync in progress");
					}

					@Test
					void it_should_initiate_delete_of_{{nameLowercase}}s() {
					String existingId = {{name}}Fixtures.randomOneViaCommand(commandGateway,{{nameLower}}Repository, getCurrentUser()).getId().value();
					{{name}}SyncRequest requestDTO = {{name}}SyncRequest.builder()
					.deltas(List.of(
					{{name}}DeltaDto.builder()
					.id(existingId)
					.type("DELETE")
					.build()
					))
					.build();

					String uri = "/api/v1{{apiPrefix}}/commands/{{nameLowercase}}/sync";
					HttpEntity<{{name}}SyncRequest> request = new HttpEntity<>(requestDTO, headers);
						ResponseEntity<ApiResponseDto> response = testRestTemplate.postForEntity(uri, request, ApiResponseDto.class);

							assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
							assertThat(response.getBody().getCode()).isEqualTo(1);
							assertThat(response.getBody().getMessage()).isEqualTo("Sync in progress");
							}

							@Test
							void it_should_handle_empty_delta_list() {

							{{name}}SyncRequest requestDTO = {{name}}SyncRequest.builder()
							.deltas(List.of())
							.build();

							String uri = "/api/v1{{apiPrefix}}/commands/{{nameLowercase}}/sync";
							HttpEntity<{{name}}SyncRequest> request = new HttpEntity<>(requestDTO, headers);
								ResponseEntity<ApiResponseDto> response = testRestTemplate.postForEntity(uri, request, ApiResponseDto.class);

									assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
									assertThat(response.getBody().getCode()).isEqualTo(1);
									assertThat(response.getBody().getMessage()).isEqualTo("Sync in progress");
				}
}