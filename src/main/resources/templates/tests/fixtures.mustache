package {{package}};

{{#imports}}
import {{.}};
{{/imports}}

import {{base}}.{{vo}}.*;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.axonframework.commandhandling.gateway.CommandGateway;
import org.springframework.mock.web.MockMultipartFile;
import java.util.concurrent.TimeUnit;
import static org.awaitility.Awaitility.await;

public class {{name}}Fixtures {

public static {{name}} randomOne({{name}}Repository repository) {
	{{name}} entity = new {{name}}();
	entity.setId(UUID.randomUUID().toString());
	{{#fields}}
		{{^isId}}
			{{^relation}}
			entity.set{{nameCapitalized}}({{{testValue}}});
			{{/relation}}
		{{/isId}}
	{{/fields}}
	return repository.save(entity);
}

public static {{name}} existingOrRandom({{name}}Repository repository) {
	return repository.findAll().stream().findFirst().orElseGet(() -> randomOne(repository));
}

public static {{name}} byId({{name}}Repository repository, String id) {

	return repository.findById(id).orElse(null);
}

public static {{name}} byIdWaitExist({{name}}Repository repository, String id) {

	await().atMost(5, TimeUnit.SECONDS).until(() -> byId(repository, id) != null);

	return repository.findById(id).orElse(null);
}

public static {{name}} byIdWaitNotExist({{name}}Repository repository, String id) {

	await().atMost(5, TimeUnit.SECONDS).until(() -> byId(repository, id) == null);

return repository.findById(id).orElse(null);
}

public static List<{{name}}> randomMany({{name}}Repository repository, int count) {
	List<{{name}}> items = new ArrayList<>();
	for (int i = 0; i < count; i++) {
	items.add(randomOne(repository));
	}
	return items;
}

public static void deleteAll({{name}}Repository repository) {
	repository.deleteAll();
}

public static Create{{name}}Command randomOneViaCommand(CommandGateway commandGateway) {
	{{#hasFiles}}
		MockMultipartFile files = new MockMultipartFile("fake", "fake.txt", "text/plain", "Hello".getBytes());
		String fileName = files.getName();
		{{/hasFiles}}
		Create{{name}}Command command = new Create{{name}}Command(
		{{#fields}}{{^isId}}{{entity}}{{nameCapitalized}}.create(
				{{{testValue}}}){{^last}},{{/last}}{{/isId}}{{/fields}}{{#hasFiles}},{{#fieldFiles}}
			{{entity}}{{nameCapitalized}}.create(fileName){{^last}},{{/last}}
		{{/fieldFiles}}
		{{/hasFiles}}
		);
	 commandGateway.sendAndWait(command);

	return command;
}

}
