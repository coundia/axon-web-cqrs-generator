package {{packageEntity}};

{{#imports}}
import {{.}};
{{/imports}}

import {{base}}.{{vo}}.*;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import org.axonframework.commandhandling.gateway.CommandGateway;
import org.springframework.mock.web.MockMultipartFile;
import static org.awaitility.Awaitility.await;

public class {{name}}Fixtures {

	public static {{entity}} byId({{name}}Repository repository, String id) {
		return repository.findById(id).orElse(null);
	}

	public static {{entity}} byIdWaitExist({{name}}Repository repository, String id) {
		await().atMost(10, TimeUnit.SECONDS).until(() -> repository.findById(id).isPresent());
		return repository.findById(id).orElse(null);
	}

	public static {{entity}} byIdWaitNotExist({{name}}Repository repository, String id) {
		await().atMost(10, TimeUnit.SECONDS).until(() -> repository.findById(id).isEmpty());
		return null;
	}

	public static List<Create{{name}}Command> randomManyViaCommand(
		CommandGateway commandGateway,
		{{name}}Repository repository,
		{{#fields}}
    {{#hasRepository}}
        {{repository}},
        {{/hasRepository}}
{{/fields}}
		int count,
		User user
	) {
		List<Create{{name}}Command> items = new ArrayList<>();
		for (int i = 0; i < count; i++) {
			Create{{name}}Command command = randomOneViaCommand(
			commandGateway,
			 repository,
			 {{#fields}}
    {{#hasRepository}}
        {{nameUnCapitalized}}DataRepository,
            {{/hasRepository}}
{{/fields}}
			 user);
			items.add(command);
		}
		return items;
	}

	public static void deleteAll({{name}}Repository repository) {
		repository.deleteAll();
	}

		public static Create{{name}}Command randomOneViaCommand(
		CommandGateway commandGateway,
		{{name}}Repository  repository,
		{{#fields}}
    {{#hasRepository}}
        {{repository}},
        {{/hasRepository}}
{{/fields}}
		 User user) {
			{{#hasFiles}}
				MockMultipartFile files = new MockMultipartFile("fake", "fake.txt", "text/plain", "Hello".getBytes());
				String fileName = files.getName();
			{{/hasFiles}}

			Create{{name}}Command command = Create{{name}}Command.builder()
			{{#editableFields}}{{^isId}}
				.{{nameLowerCase}}({{nameAggregate}}{{nameCapitalized}}.create({{{testValue}}}))
			{{/isId}}{{/editableFields}}
{{#hasFiles}}
    {{#fieldFiles}}
					.{{nameLowerCase}}({{nameAggregate}}{{nameCapitalized}}.create(fileName))
				{{/fieldFiles}}
{{/hasFiles}}
			.build();

		command.setCreatedBy({{name}}CreatedBy.create(user.getId()));
		command.setTenant({{name}}Tenant.create(user.getTenant().getId()));
		commandGateway.sendAndWait(command);
		await().atMost(10, TimeUnit.SECONDS).until(() -> repository.findById(command.getId().value()).isPresent());
		return command;
	}


{{#hasManyToOne}}
	public static Create{{name}}Command randomOneViaCommand(
        CommandGateway commandGateway,
        {{name}}Repository  repository,
        User user
        ) {
        {{#hasFiles}}
        MockMultipartFile files = new MockMultipartFile("fake", "fake.txt", "text/plain", "Hello".getBytes());
        String fileName = files.getName();
        {{/hasFiles}}

        Create{{name}}Command command = Create{{name}}Command.builder()
        {{#editableFields}}
    {{^hasRepository}}
        {{^isId}}
        .{{nameLowerCase}}({{nameAggregate}}{{nameCapitalized}}.create({{{testValue}}}))
        {{/isId}}
    {{/hasRepository}}
{{/editableFields}}
{{#hasFiles}}
    {{#fieldFiles}}
        .{{nameLowerCase}}({{nameAggregate}}{{nameCapitalized}}.create(fileName))
        {{/fieldFiles}}
{{/hasFiles}}
        .build();

		command.setCreatedBy({{name}}CreatedBy.create(user.getId()));
		command.setTenant({{name}}Tenant.create(user.getTenant().getId()));
		commandGateway.sendAndWait(command);
		await().atMost(10, TimeUnit.SECONDS).until(() -> repository.findById(command.getId().value()).isPresent());
		return command;
	}
	{{/hasManyToOne}}
}
