package {{package}};

{{#imports}}
	import {{.}};
{{/imports}}
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;
import org.springframework.data.repository.query.Param;
import java.time.*;
import java.util.*;

import java.util.List;
import java.util.Optional;

@Repository
public interface {{name}}Repository extends JpaRepository<{{entityName}}, String> {

	@Query("SELECT e FROM {{entityName}} e WHERE e.id = ?1 and e.createdBy.id = ?2 ORDER BY e.updatedAtAudit DESC limit 1 ")
	Optional<{{entityName}}> findByIdAndCreatedById(String id, String createdById);
	@Query("SELECT e FROM {{entityName}} e WHERE e.id = ?1 and e.tenant.id = ?2 ORDER BY e.updatedAtAudit DESC ")
	List<{{entityName}}> findByIdAndTenantId(String id, String tenantId);

	Page<{{entityName}}> findByCreatedById(String createdById, Pageable pageable);
	Page<{{entityName}}> findAllByTenantId(String tenantId, Pageable pageable);

	{{#fields}}
	{{^isId}}

        {{^shared}}
	@Query("SELECT e FROM {{entityName}} e WHERE e.{{nameJpaUnCapitalized}} = ?1 and e.createdBy.id = ?2 ORDER BY e.updatedAtAudit DESC")
	List<{{entityName}}> findBy{{nameJpa}}AndCreatedById({{primitiveType}} {{nameLowerCase}}, String createdById);
	{{/shared}}
        {{#shared}}

 	@Query("""
	SELECT DISTINCT t FROM {{entityName}} t
	LEFT JOIN AccountUser au ON au.account.id = t.account.id
	WHERE t.account.id = :values AND (t.createdBy.id = :userId OR au.user.id = :userId)
	""")
	List<{{entityName}}> findBy{{nameJpa}}AndCreatedById({{primitiveType}} values, String userId);
	{{/shared}}

	@Query("SELECT e FROM {{entityName}} e WHERE e.{{nameJpaUnCapitalized}} = ?1  ORDER BY e.updatedAtAudit DESC ")
	Optional<{{entityName}}> findBy{{nameJpa}}({{primitiveType}} {{nameLowerCase}});

	@Query("SELECT e FROM {{entityName}} e WHERE e.{{nameJpaUnCapitalized}} = ?1 and e.tenant.name = ?2 ORDER BY e.updatedAtAudit DESC ")
	List<{{entityName}}> findBy{{nameJpa}}AndTenantName({{primitiveType}} {{nameLowerCase}}, String tenantName);

	@Query("SELECT e FROM {{entityName}} e WHERE e.{{nameJpaUnCapitalized}} = ?1 and e.tenant.id = ?2 ORDER BY e.updatedAtAudit DESC ")
	List<{{entityName}}> findBy{{nameJpa}}AndTenantId({{primitiveType}} {{nameLowerCase}}, String tenantId);
	{{/isId}}
	{{/fields}}

	{{#shared}}
    @Query("""
    SELECT DISTINCT s FROM {{entityName}} s
    LEFT JOIN {{entityName}}User su ON su.{{entityNameLowerCase}} = s
    WHERE s.tenant.id = :tenantId AND (s.createdBy.id = :userId OR su.user.id = :userId)
    """)
	Page<{{entityName}}> findAllOwnedOrShared(@Param("userId") String userId, @Param("tenantId") String tenantId, Pageable pageable);


	{{/shared}}



}
