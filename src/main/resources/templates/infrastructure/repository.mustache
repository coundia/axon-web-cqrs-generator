package {{package}};

{{#imports}}
	import {{.}};
{{/imports}}
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;
import org.springframework.data.repository.query.Param;
import java.time.*;
import java.util.*;

import java.util.List;
import java.util.Optional;

@Repository
public interface {{name}}Repository extends JpaRepository<{{entityName}}, String> {

	@Query("SELECT e FROM {{entityName}} e WHERE e.id = ?1 and e.createdBy.id = ?2 ORDER BY e.updatedAtAudit DESC, e.createdAtAudit  DESC limit 1 ")
	Optional<{{entityName}}> findByIdAndCreatedById(String id, String createdById);
	@Query("SELECT e FROM {{entityName}} e WHERE e.id = ?1 and e.tenant.id = ?2 ORDER BY e.updatedAtAudit DESC, e.createdAtAudit  DESC ")
	List<{{entityName}}> findByIdAndTenantId(String id, String tenantId);

    @Query("SELECT e FROM {{entityName}} e WHERE e.createdBy.id = ?1 ORDER BY e.updatedAtAudit DESC, e.createdAtAudit  DESC ")
	Page<{{entityName}}> findByCreatedById(String createdById, Pageable pageable);

	@Query("SELECT e FROM {{entityName}} e WHERE e.tenant.id = ?1 ORDER BY e.updatedAtAudit DESC, e.createdAtAudit  DESC ")
	Page<{{entityName}}> findAllByTenantId(String tenantId, Pageable pageable);

    {{#hasNameField}}
     @Query("SELECT e FROM {{entityName}} e WHERE e.name = ?1 ORDER BY e.updatedAtAudit DESC, e.createdAtAudit  DESC limit 1 ")
	Optional<{{entityName}}> findByName(String name);
	{{/hasNameField}}
	{{#fields}}
        {{^isDate}}
        {{^isId}}
        {{^transactional}}
        {{#hasLike}}
        @Query("SELECT e FROM {{entityName}} e WHERE LOWER(e.{{nameJpaUnCapitalized}}) LIKE LOWER(CONCAT('%', :{{nameUnCapitalized}}, '%')) AND e.createdBy.id = :createdById ORDER BY e.updatedAtAudit DESC, e.createdAtAudit  DESC")
        {{/ hasLike }}
        {{^hasLike}}
        @Query("SELECT e FROM {{entityName}} e WHERE e.{{nameJpaUnCapitalized}} = :{{nameUnCapitalized}} AND e.createdBy.id = :createdById ORDER BY e.updatedAtAudit DESC, e.createdAtAudit  DESC")
        {{/hasLike}}
        List<{{entityName}}> findBy{{nameJpa}}AndCreatedById({{primitiveType}} {{nameLowerCase}}, String createdById);
        {{/transactional}}
        {{#transactional}}
        @Query("""
        SELECT DISTINCT t FROM {{entityName}} t
        LEFT JOIN AccountUser au ON au.account.id = t.account.id
        WHERE t.account.id = :valueId AND (t.createdBy.id = :userId OR au.user.id = :userId OR au.account.createdBy.id = :userId)
        """)
        List<{{entityName}}> findBy{{nameJpa}}AndCreatedById({{primitiveType}} valueId, String userId);
        {{/transactional}}
        {{#hasLike}}
        @Query("SELECT e FROM {{entityName}} e WHERE LOWER(e.{{nameJpaUnCapitalized}}) LIKE LOWER(CONCAT('%', :{{nameUnCapitalized}}, '%')) AND e.tenant.name = :tenantName ORDER BY e.updatedAtAudit DESC, e.createdAtAudit  DESC")
        {{/ hasLike }}
        {{^hasLike}}
        @Query("SELECT e FROM {{entityName}} e WHERE e.{{nameJpaUnCapitalized}} = :{{nameUnCapitalized}} AND e.tenant.name = :tenantName ORDER BY e.updatedAtAudit DESC, e.createdAtAudit  DESC")
        {{/hasLike}}
        List<{{entityName}}> findBy{{nameJpa}}AndTenantName({{primitiveType}} {{nameLowerCase}}, String tenantName);

        {{#hasLike}}
        @Query("SELECT e FROM {{entityName}} e WHERE LOWER(e.{{nameJpaUnCapitalized}}) LIKE LOWER(CONCAT('%', :{{nameUnCapitalized}}, '%')) AND e.tenant.id = :tenantId ORDER BY e.updatedAtAudit DESC, e.createdAtAudit  DESC")
        {{/ hasLike }}
        {{^hasLike}}
        @Query("SELECT e FROM {{entityName}} e WHERE e.{{nameJpaUnCapitalized}} = :{{nameUnCapitalized}} AND e.tenant.id = :tenantId ORDER BY e.updatedAtAudit DESC, e.createdAtAudit  DESC")
        {{/hasLike}}
       List<{{entityName}}> findBy{{nameJpa}}AndTenantId({{primitiveType}} {{nameLowerCase}}, String tenantId);
        {{/isId}}
        {{/isDate}}
        {{#isDate}}
        {{^isSyncAt}}
        @Query("""
        SELECT e FROM {{entityName}} e
        WHERE e.{{nameJpaUnCapitalized}} >= :#{#{{nameJpaUnCapitalized}}.atZone(T(java.time.ZoneOffset).UTC).toLocalDate().atStartOfDay(T(java.time.ZoneOffset).UTC).toInstant()}
        AND e.createdBy.id = :createdById
        ORDER BY e.updatedAtAudit DESC, e.createdAtAudit  DESC
        """)
         List<{{entityName}}> findBy{{nameJpa}}AndCreatedById({{primitiveType}} {{nameJpaUnCapitalized}}, String createdById);
         {{/isSyncAt}}
         @Query("""
        SELECT e FROM {{entityName}} e
        WHERE e.{{nameJpaUnCapitalized}} >= :#{#{{nameJpaUnCapitalized}}.atZone(T(java.time.ZoneOffset).UTC).toLocalDate().atStartOfDay(T(java.time.ZoneOffset).UTC).toInstant()}
        AND e.tenant.id = :tenantId
        ORDER BY e.updatedAtAudit DESC, e.createdAtAudit  DESC
        """)
         List<{{entityName}}> findBy{{nameJpa}}AndTenantId({{primitiveType}} {{nameJpaUnCapitalized}}, String tenantId);



         {{/isDate}}
	{{/fields}}

	{{#shared}}

	@Query("""
        SELECT e FROM {{entityName}}  e
        WHERE e.syncAt >= :#{#syncAt.atZone(T(java.time.ZoneOffset).UTC).toLocalDate().atStartOfDay(T(java.time.ZoneOffset).UTC).toInstant()}
         AND (
                 e.createdBy.id = :createdById
                 OR EXISTS (
                      SELECT 1
                      FROM AccountUser au, User u
                      WHERE au.account = e.account
                        AND (
                              (au.identity IS NOT NULL AND au.identity = u.username)
                           OR (au.email    IS NOT NULL AND au.email    = u.email)
                           OR (au.phone    IS NOT NULL AND au.phone    = u.telephone)
                        )
                 )
            )
        ORDER BY e.updatedAtAudit DESC, e.createdAtAudit  DESC
        """)
         List<{{entityName}}> findBySyncAtAndCreatedById(java.time.Instant syncAt, String createdById);

         @Query("""
            select case when count(e)>0 then true else false end
                 from {{entityName}}  e
                     where e.id=:id
                        and (
                            e.createdBy.id = :userId
                            or exists (
                                select 1
                                    from AccountUser au, User u
                                    where au.account = e.account
                                    and (
                                    (au.identity is not null and au.identity = u.username)
                                        or (au.email is not null and au.email = u.email)
                                        or (au.phone is not null and au.phone = u.telephone)
                                    )
                        )
            )
            """)
    boolean isOwner( @Param("id") String id,@Param("userId") String userId);
	{{/shared}}



}
