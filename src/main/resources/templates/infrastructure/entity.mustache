package {{package}};

{{#imports}}
import {{.}};
{{/imports}}

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.Builder;

import java.time.*;
import java.util.*;

{{#isAuditable}}
import {{base}}.shared.infrastructure.audit.AbstractAuditableEntity;
import {{base}}.shared.infrastructure.audit.AuditListener;
{{/isAuditable}}

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Builder
@Entity
{{#isAuditable}}
@EntityListeners(AuditListener.class)
{{/isAuditable}}
@Table(name = "{{tableName}}")
public class {{entity}} {{#isAuditable}}  extends AbstractAuditableEntity {{/isAuditable}} {

	@Id
	private String id;

{{#fields}}
{{^isId}}
{{^isFiles}}
{{#relation}}
{{#isOneToMany}}
	@OneToMany(mappedBy = "{{entityLowerCase}}",fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	private {{{realType}}} {{nameLowerCase}} = new HashSet<>();
{{/isOneToMany}}
{{#isManyToOne}}
	@ManyToOne
	@JoinColumn(name = "{{nameLowerCase}}_id", nullable = {{nullable}})
	private {{realType}} {{nameLowerCase}};
{{/isManyToOne}}
{{/relation}}
{{^relation}}

	@Column(nullable = {{nullable}}, {{#columnDefinition}}
		columnDefinition = "{{columnDefinition}}",{{/columnDefinition}}
		unique = {{unique}}

	)
	{{#defaultValue}}
	@Builder.Default{{/defaultValue}}

	private {{primitiveType}} {{nameLowerCase}} {{#defaultValue}} = {{{defaultValue}}} {{/defaultValue}};
{{/relation}}
{{/isFiles}}
{{/isId}}
{{/fields}}
	public {{entity}}(String id) {
		this.id = id;
	}

	@Override
 	public String toString() {
		return "{{entity}}{" +
		"id='" + id + '\'' +
		{{#fields}}
    {{^isFiles}}
		{{^isId}}
			", {{nameLowerCase}}=" + {{nameLowerCase}} +
		{{/isId}}
        {{/isFiles}}
		{{/fields}}
		'}';
	}
}
